<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation for Hugo Learn Theme</title>
    <link>https://bluewhale-users.github.io/ko/</link>
    <description>Recent content on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Fri, 11 Mar 2022 12:30:26 +0900</lastBuildDate><atom:link href="https://bluewhale-users.github.io/ko/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apigee1 : 소개</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee1/</link>
      <pubDate>Tue, 29 Mar 2022 13:44:42 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee1/</guid>
      <description>Apigee 소개  Apigee 기술문서 Apigee 문서 Choosing between service management and API management  1. 요약 Apigee는 API 개발 및 관리를 위한 플랫폼입니다. Apigee는 프록시 레이어와 함께 서비스를 전면에 내세워 백엔드 서비스 API의 추상화 또는 퍼사드를 제공하고 보안, 비율 제한, 할당량, 분석 등을 제공합니다.
2. Apigee 사용 목적  전체 API 수명 주기 기능으로 API 프로그램 빌드 및 확장 유연한 개발자 포털 옵션으로 API 사용 촉진 전체 API 가치 사슬에서 활용 가능한 분석 정보 확보 API 제품으로 수익을 창출하고 디지털 자산의 비즈니스 가치 극대화  3.</description>
    </item>
    
    <item>
      <title>Hugo1 : Hugo 소개</title>
      <link>https://bluewhale-users.github.io/ko/hugo/usage/hugo1/</link>
      <pubDate>Tue, 22 Mar 2022 11:23:48 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/hugo/usage/hugo1/</guid>
      <description>1. Hugo  gohugo.io hugo github shortcodes  휴고(Hugo)는 Go로 작성된 정적 사이트1 생성기입니다. 웹페이지 접속시 실시간으로 페이지를 생성하는 동적사이트2와 달리 휴고는 컨텐츠를 만들거나 업데이트시 페이지를 생성합니다. 따라서 휴고로 구축된 웹사이트는 일반적으로 더 빠르고 안전합니다.
장점
 빌드 시간이 매우 빠르다. 다양한 OS에서 쉽게 설치하여 개발할 수 있다. LiveReload 기능을 제공해 변경사항을 즉시 렌더링해 확인할 수 있다. 다양한 테마가 존재한다. 정적 사이트를 렌더링하므로 제한없이 모든곳에서 호스팅할 수 있다.    static site는 고정된 html을 그냥 뿌려주는 사이트이다.</description>
    </item>
    
    <item>
      <title>Tutorial1 : 준비</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial1/</link>
      <pubDate>Tue, 15 Mar 2022 10:47:32 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial1/</guid>
      <description>1. OKD CI/CD 소개  CI/CD Flow with Argo CD   [출처] https://www.gspann.com/resources/blogs/continuous-delivery-for-kubernetes-with-gitops-and-argo-cd/
&amp;lsquo;GitOps&amp;rsquo;는 형상 관리 도구인 &amp;lsquo;Git&amp;rsquo; 을 통해 개발자에게 익숙한 방식으로 인프라 또는 어플리케이션의 선언적인 설정파일을 관리하고 배포하는 일련의 프로세스를 말합니다. 이 튜토리얼은 어플리케이션 소스를 담고있는 Source Repository와 OKD에 배포를 위한 설정(manifest files)들을 담고 있는 GitOps Repository 2개의 리파지토리가 필요합니다.
2. OKD CI/CD 프로세스  Source Repo에 변경사항을 Commit 한다. Jenkins에서 변경사항을 감지하고 빌드를 수행한다. Docker Image를 dockerhub에 Push한다.</description>
    </item>
    
    <item>
      <title>Apigee2 : 무료로 사용해보기</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee2/</link>
      <pubDate>Tue, 29 Mar 2022 13:44:49 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee2/</guid>
      <description>1. Apigee 이동 2. 무료로 사용해 보기 선택  3. GCP project ID가 필요하다.  프로젝트는 모든 Google Cloud 리소스를 구성합니다. 프로젝트는 사용자 집합, API 집합, 그리고 이러한 API에 대한 청구, 인증, 모니터링 설정으로 구성됩니다. 예를 들어 모든 Cloud Storage 버킷과 객체는 이를 액세스할 수 있는 사용자 권한과 함께 프로젝트에 상주합니다. 프로젝트를 한 개만 갖거나 여러 프로젝트를 만들 수 있으며, 이를 사용하여 Cloud Storage 데이터를 포함한 Google Cloud 리소스를 논리적 그룹으로 구성할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Hugo2 : 사이트 구축</title>
      <link>https://bluewhale-users.github.io/ko/hugo/usage/hugo2/</link>
      <pubDate>Tue, 22 Mar 2022 11:24:17 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/hugo/usage/hugo2/</guid>
      <description>1. Hugo 설치  Hugo Quick-Start  1.1 hugo 설치(windows 기준 설명)  Hugo Download hugo release에서 최신버전을 다운로드 C:\Hugo\bin\에 압축 해제 환경변수에 경로 추가  window + Q로 검색창을 연 뒤 환경 변수를 검색해서 환경 변수 선택 시스템변수의 Path를 더블클릭한다. 새로 만들기를 클릭한 다음 아까 압축을 풀었던 곳인 C:\Hugo\bin를 등록   command에서 hugo version을 쳐서 확인  windowsMacOSC:\Users\user&amp;gt;hugo version hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio brew install hugo # or port install hugo 1.</description>
    </item>
    
    <item>
      <title>Tutorial2 : 리파지토리 생성</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial2/</link>
      <pubDate>Tue, 15 Mar 2022 11:27:51 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial2/</guid>
      <description>GitHub Repository 준비 origin repository  src gitops  1. 2개 리파지토리를 본인 계정으로 fork   src fork repo gitops fork repo  2. Deploy Key 생성 및 등록 jenkins 빌드후 gitops 리파지토리에 commit을 수행하기 위해 deploy key를 등록합니다.
2.1 Gitbash를 실행하여 ssh-keygen을 통해 deploy key를 생성 user@DESKTOP-1RAT70A MINGW64 ~/.ssh $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/user/.ssh/id_rsa): okd-tutorial-deploykey Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in okd-tutorial-deploykey.</description>
    </item>
    
    <item>
      <title>Apigee3 : API Reverse Proxy</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee3/</link>
      <pubDate>Tue, 29 Mar 2022 13:44:51 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee3/</guid>
      <description>1. Create New 선택  2. Reverse proxy 선택  3. Proxy 설정 추가 Name : okd Target : http://dotnetexample-okd-tutorial.apps.blackwhale.cloud.hancom.com/WeatherForecast  4. Add CORS Headers 체크  5. Optional Deployment - eval 체크 안함  6. Create 완료 - Edit proxy 선택  7. Revision을 1번을 Deploy 한다.  8. 서비스 어카운트 설정은 기본값으로 Deploy  9. URL에 접속해 프록시가 동작하는지 확인한다.  https://spsenti2023.duckdns.org/okd   10. 새버전 추가    좌측의 Revision Dropdown 메뉴를 선택해 Save as new revision을 선택한다.</description>
    </item>
    
    <item>
      <title>Hugo3 : 테마 수정 및 변경</title>
      <link>https://bluewhale-users.github.io/ko/hugo/usage/hugo3/</link>
      <pubDate>Tue, 22 Mar 2022 11:24:20 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/hugo/usage/hugo3/</guid>
      <description>1. Theme Overriding 테마 수정시 &amp;rsquo;themes&amp;rsquo; 디렉토리의 내용은 수정하지 않는다. 테마구조를 살펴보면 원본 프로젝트 구조와 유사한 것을 확인할 수 있다. (archetypes, layouts, static, &amp;hellip;), 즉 테마도 hugo 프로젝트이다.
테마 프로젝트의 layouts 파일들을 원본 프로젝트 layouts 폴더에 복사하여 이를 수정함으로써 테마를 오버라이딩하여 사용할 수 있다.
 \layouts\partials\header.html이 존재하면 \layouts\partials\header.html을 적용한다. 존재하지 않으면 \themes&amp;lt;테마 이름&amp;gt;\layouts\partials\header.html을 적용한다  2. 아래 링크를 참고하여 테마를 수정해 보자.  hugo-theme-techdoc exampleSite  config.tomlbaseURL = &amp;#39;https://bluewhale-users.</description>
    </item>
    
    <item>
      <title>Tutorial3 : DockerHub 설정</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial3/</link>
      <pubDate>Tue, 15 Mar 2022 11:31:20 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial3/</guid>
      <description>DockerHub 설정 1. docker hub에 계정 생성  dockerhub link   2.리파지토리를 생성 name : okdtutorial visibility : public   [생성화면]   </description>
    </item>
    
    <item>
      <title>Apigee4 : 개발자 포털1</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee4/</link>
      <pubDate>Tue, 29 Mar 2022 13:44:57 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee4/</guid>
      <description>1. Apigee -&amp;gt; Publish -&amp;gt; Portals -&amp;gt; Get Started 선택  2. 이름 입력  3. 관리 화면  우측 상단의 Live Potal을 선택한다.    4. 개발자포털 화면  https://pure-fold-339305-developers.apigee.io/    5. 계정 생성   우측상단의 Sign In을 눌러 계정을 만든다.    인증메일을 발송한다.    6. 전송된 링크로 접속 확인   7. My App 만들기  계정을 눌러 Apps를 선택한다.    8.</description>
    </item>
    
    <item>
      <title>Hugo4 : css 스타일 참조</title>
      <link>https://bluewhale-users.github.io/ko/hugo/usage/hugo4/</link>
      <pubDate>Tue, 22 Mar 2022 11:24:21 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/hugo/usage/hugo4/</guid>
      <description>css 파일 추가 1. config.toml 파일 수정 [params] ... custom_css = [&amp;#34;css/custom.css&amp;#34;] ... 2. css 파일 추가 static/css/custom.css 파일 추가  custom.css  img[src$=&amp;#39;#floatleft&amp;#39;] { float:left; } img[src$=&amp;#39;#floatright&amp;#39;] { float:right; } figure.floatright { max-width: 30%; width: auto\9*0.3; /* ie8 */ height: auto; float: right; } figure.floatleft { max-width: 30%; width: auto\9*0.3; /* ie8 */ height: auto; float: left; } 3. layouts/partials/header.html 수정 .... {{ range .Site.Params.custom_css -}} ... &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{{ .</description>
    </item>
    
    <item>
      <title>Tutorial4 : Jenkins 설정</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial4/</link>
      <pubDate>Tue, 15 Mar 2022 11:31:43 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial4/</guid>
      <description>Jenkins 설치 1. OKD에 로그인  okd link  [접속 화면]     2. Project 만들기   [프로젝트 생성 화면]   3. 역할 전환(developer) 좌측 상단의 역할선택 드롭메뉴에서 developer을 선택합니다.
  4. Jenkins 설치 OKD-&amp;gt;Developer-&amp;gt;Add 4.1 All services 선택  4.2 jenkins 로 검색  4.3 Jenkins v0.0.3 Helm Charts 버전 설치 (기본 설정 사용)   4.4 설치 완료(Pods의 상태가 Running으로 바뀔때까지 대기)  5.</description>
    </item>
    
    <item>
      <title>Apigee5 : 개발자 포털2</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee5/</link>
      <pubDate>Tue, 29 Mar 2022 13:44:59 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee5/</guid>
      <description>개발자 포털 Open-API-Specification
샘플
1. API Document 추가  API catalog 선택    2. Portals -&amp;gt; Pages 이동  API 선택(okd-api-sample)    3. 우측의 연필 모양 클릭해 편집모드로 변경  4. API Documentation   Source API sepc 리스트박스 선택(Select OpenAPI Spec)    JSON 파일 업로드     [sample json]
{  &amp;#34;openapi&amp;#34;: &amp;#34;3.0.1&amp;#34;,  &amp;#34;info&amp;#34;: {  &amp;#34;title&amp;#34;: &amp;#34;okd-sample-API Service&amp;#34;,  &amp;#34;version&amp;#34;: &amp;#34;v1&amp;#34;  },  &amp;#34;servers&amp;#34;: [  {  &amp;#34;url&amp;#34;: &amp;#34;https://dotnetexample-okd-tutorial.</description>
    </item>
    
    <item>
      <title>Tutorial5 : Jenkins Pipeline 구성</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial5/</link>
      <pubDate>Tue, 15 Mar 2022 11:31:56 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial5/</guid>
      <description>Jenkins Pipeline 구성 1. ssh agent plug-in 설치  Jenkins -&amp;gt; Jenkins 관리 -&amp;gt; 플러그인 관리 이동 &amp;ldquo;ssh agent&amp;rdquo; 검색   1.1 Download now and install after restart 선택  1.2 설치가 끝나고 실행중인 작업이 없으면 Jenkins 재시작 선택  1.3 로그인 화면  2. credentials 등록  Jenkins -&amp;gt; Jenkins 관리 -&amp;gt; Manage Credentials 이동  2.1 (Global) 도메인 선택  2.2 Add Credentials 선택   Jenkinsfile 확인  jenkinsfile의 credentialsId 이름으로 등록한다.</description>
    </item>
    
    <item>
      <title>Apigee6 : 개발자 포털3</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee6/</link>
      <pubDate>Tue, 29 Mar 2022 13:45:01 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee6/</guid>
      <description>1. 페이지 추가(+Page 선택)  2. 페이지 이름 입력(경록 확인 : test)  3. 페이지 편집  Publish 선택    4. 메뉴 추가  5. 메뉴 이름 입력(Page Path 입력 : test)  6. Publish 선택  7. Live Portal 확인  </description>
    </item>
    
    <item>
      <title>Tutorial6 : Buildconfig 설정</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial6/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:10 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial6/</guid>
      <description>OKD Buildconfig 설정 설치한 Jenkins 버전에는 docker를 포함하지 않는다.
docker image 빌드를 위해 okd buildconfig를 사용한다.
1. BuildConfig 생성  okd -&amp;gt; Developer -&amp;gt; Builds    1.1 Create BuildConfig 선택   Jenkinsfile 확인  BuildConfig 이름을 jenkinsfile에 appName으로 맵핑된다.
jenkinsfile의 appName을 BuildConfig의 이름으로 변경한다.
appName = &amp;ldquo;okd-tutorial&amp;rdquo;
1.2 아래 내용을 편집해 본인 설정에 맞게 변경한다. BuildConfig YAML 샘플
kind: BuildConfig apiVersion: build.openshift.io/v1 metadata:  name: okd-tutorial  labels:  app.</description>
    </item>
    
    <item>
      <title>Apigee7 : API Proxies Demo</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee7/</link>
      <pubDate>Tue, 29 Mar 2022 13:45:03 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee7/</guid>
      <description>Create New  Reverse Proxy 선택  Proxy details  Name: okd-api Base path: okd-api Target: https://dotnetexample-okd-tutorial.apps.blackwhale.cloud.hancom.com/Document  Security(Authorization) : API Key Quota: Impose quotas per App Security(Browser) : Add CORS headers Summary  Edit Proxy  Overview  eval(개발환경) deploy   Deploy 선택    DEVELOP 탭 확인  PreFlow [Policies] - Add CORS - Impose Quota - Remove Query Param apikey - Verify API Key  API Products 추가(Create New 선택)  Product details 입력  Name: okd-api-product Display Name: Demo API Environment: eval Access: Public Oprations 추가(ADD AN OPERATION)  API Proxy : okd-api Operation: /okd-api Methods: 모두 선택 Save를 눌러 저장한다.</description>
    </item>
    
    <item>
      <title>Tutorial7 : 테스트 빌드</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial7/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:25 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial7/</guid>
      <description>Jenkins Test Build 1. Build now 선택  2. 빌드 성공  3. dockerhub 이미지 push 확인  4. gitops repo 확인  5. jenkinsfile 확인 library identifier: &amp;#34;pipeline-library@v1.5&amp;#34;, retriever: modernSCM(  [  $class: &amp;#34;GitSCMSource&amp;#34;,  remote: &amp;#34;https://github.com/redhat-cop/pipeline-library.git&amp;#34;  ] )  // OKD의 Buildconifg의 이름과 일치시켜야 한다. appName = &amp;#34;okd-tutorial&amp;#34;  pipeline {  agent {  node {  label &amp;#39;nodejs&amp;#39;  }  }  options {  timeout(time: 20, unit: &amp;#39;MINUTES&amp;#39;)  }  stages {  stage(&amp;#34;Checkout&amp;#34;) {  steps {  checkout scm  }  }  stage(&amp;#39;Build&amp;#39;) {  steps {  sh &amp;#39;npm install&amp;#39;  sh &amp;#39;CI=false npm run build&amp;#39;  }  }  stage(&amp;#34;Docker Build&amp;#34;) {  steps {  // This uploads your application&amp;#39;s source code and performs a binary build in OpenShift // This is a step defined in the shared library (see the top for the URL) // (Or you could invoke this step using &amp;#39;oc&amp;#39; commands!</description>
    </item>
    
    <item>
      <title>Apigee8 : VS Code에서 Apigee를 사용해 API 프록시 빌드하기</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee8/</link>
      <pubDate>Tue, 29 Mar 2022 13:45:07 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee8/</guid>
      <description>참고
순서  Apigee 작업공간을 만들어 Apigee를 사용하는 로컬 개발에 필요한 디렉터리 구조를 설정합니다. API 프록시를 만듭니다. API 프록시를 모의 대상 엔드포인트에 연결하여 작동 방식을 확인할 수 있습니다. 새 API 프록시가 포함된 환경을 구성하고 배포합니다. API를 테스트합니다. 테스트 리소스를 빌드하고 내보내고 API를 테스트하기 위해 API 키를 사용하여 인증하는 방법을 알아봅니다. API 프록시에서 XML 데이터를 반환하도록 대상 엔드포인트를 변경합니다. 정책을 연결하여 응답을 XML에서 JSON으로 변환합니다. Apigee 환경에 배포합니다. 보관 파일을 프로덕션으로 승격합니다.</description>
    </item>
    
    <item>
      <title>Tutorial8 : ArgoCD 설정</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial8/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:36 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial8/</guid>
      <description>ArgoCD 설치 1. ArgoCD Operator 이동  okd -&amp;gt; Administrator -&amp;gt; Operators -&amp;gt; Installed Operators 이동    2. ArgoCD 탭으로 이동후 Create ArgoCD 선택    3. Developer로 변경후 Topology 확인  okd -&amp;gt; Developer -&amp;gt; Topology    4. ArgoCD Admin 패스워드 확인  okd -&amp;gt; Developer -&amp;gt; Secrets 이동 cluster 검색    argocd-sample-cluster 시크릿 확인  Reveal values 클릭 (복호화된 admin password를 확인할 수 있다.</description>
    </item>
    
    <item>
      <title>Apigee9 : Apigee 환경에 배포하기</title>
      <link>https://bluewhale-users.github.io/ko/apigee/usage/apigee9/</link>
      <pubDate>Tue, 29 Mar 2022 13:45:10 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/apigee/usage/apigee9/</guid>
      <description>참고
 Google Cloud SDK와 gcloud beta apigee 구성요소 설치
  gcloud beta 구성요소 설치  gcloud components install beta  베타 구성요소 설치 확인  $ gcloud components list Your current Google Cloud CLI version is: 373.0.0 The latest available version is: 373.0.0 ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ Components │ ├───────────────┬──────────────────────────────────────────────────────┬──────────────────────────┬──────────┤ │ Status │ Name │ ID │ Size │ ├───────────────┼──────────────────────────────────────────────────────┼──────────────────────────┼──────────┤ │ Not Installed │ App Engine Go Extensions │ app-engine-go │ 4.</description>
    </item>
    
    <item>
      <title>Tutorial9 : ArgoCD를 이용한 배포</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial9/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:43 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial9/</guid>
      <description>ArgoCD App 배포하기 1. image registry 주소 변경   GitOps Repo
  아래 2개의 yaml파일을 편집해 이미지 경로를 본인 dockerhub의 계정과 리파지토리로 변경한다.
&amp;ndash; base/deployment-sample.yaml
&amp;ndash; okd-deploy/testblog-deployment.yaml
  image: docker.io/spcsenti/testblog:latest &amp;ndash;&amp;gt; image: docker.io/spcsenti2023/okdtutorial:latest
  2. New App 선택 [GENERAL]
Application Name : okd-tutorial
Project : default
&amp;hellip;
[SOURCE]
Repository URL : https://github.com/blackwhale-testuser/okd-tutorial1-gitops
Revision : HEAD
Path : okd-deploy
&amp;hellip;
[DESTINATION]
Cluster URL : https://kubernetes.default.svc
Namespace : okd-tutorial</description>
    </item>
    
    <item>
      <title>Tutorial10 : GitHub Webhook 추가</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial10/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:53 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial10/</guid>
      <description>CI/CD 1. GitHub Source Repository에 Webhook 추가  Source Repositoy  1.1 Settings -&amp;gt; Webhooks 이동후 Add Webhook 선택  1.2 jenkins 주소를 확인후 payload url에 입력  Payload URL : https://jenkins-okd-tutorial.apps.blackwhale.cloud.hancom.com/github-webhook/
Content type : application/json
Trigger : Juste the push event
1.3 소스 수정후 commit Jenkinsfile의 태그를 업데이트 해야 GitOps Repo로 Commit 할 수 있다.
sed -i &amp;rsquo;s/MY_BUILD_TAG/$BUILD_NUMBER/&amp;rsquo; testblog-deployment.yaml
BUILD_NUMBER가 정상적으로 셋팅되는지 확인
 1.4 Jenkins 빌드가 자동으로 동작하는지 확인  2.</description>
    </item>
    
    <item>
      <title>Tutorial11 : 문제 해결</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial11/</link>
      <pubDate>Tue, 15 Mar 2022 11:33:03 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial11/</guid>
      <description>문제 해결 1. OKD BuildConfig 빌드 확인  okd -&amp;gt; Developer -&amp;gt; Builds 생성한 BuildConfig를 선택해 Builds 탭으로 이동하면 빌드 히스토리를 확인할 수 있다.
   2. 새로 배포한 버전이 이전 이미지를 참고하는 문제 Deployment의 imagePullPolicy를 Always로 주었음에도 이미지 갱신이 되지 않는 경우가 발생한다.
저장소의 이미지와 로컬에 있는 이미지가 동일한 경우 이런 문제가 발생한다. Tag와 Digest 값이 동일한지 확인해본다.
&amp;lt;before&amp;gt; spcsenti2023/okdtutorial:latest DIGEST:sha256:7521223d8a7c54a6c9e5a40b4f4866f4394eefb3494c5de8f47fbf4e536c40e9 &amp;lt;current&amp;gt; spcsenti2023/okdtutorial:latest DIGEST:sha256:14480c323c64dd065fa0b71067226ab8995c5f2660a8e7d747795ebc2647e1b8 3. BuildConfig에서 빌드 번호 자동 업데이트 가능할까?</description>
    </item>
    
    <item>
      <title>Tutorial12 : Private Repo 연동방법</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial12/</link>
      <pubDate>Tue, 15 Mar 2022 11:33:14 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial12/</guid>
      <description>Private Repository 연동 1. SSH 키 생성  Git Bash 실행 사용자 폴더로 이동후 .ssh 폴더 생성 및 이동 ssh-keygen 실행  1.1 ssh-keygen 사용시 기본값(SHA-1)은 github에서 더 이상 인증 용도로 사용할 수 없다. Update : 2022-01-11
November 16, 2021	The ECDSA and Ed25519 host keys will start to be fully usable. GitHub’s DSA host key will no longer be supported. Unable to connect SSH repository: unknown error: ERROR: You&amp;rsquo;re using an RSA key with SHA-1, which is no longer allowed.</description>
    </item>
    
    <item>
      <title>Tutorial13 : BuildConfig 사용 예</title>
      <link>https://bluewhale-users.github.io/ko/okd/cicd/tutorial13/</link>
      <pubDate>Tue, 15 Mar 2022 11:33:27 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/okd/cicd/tutorial13/</guid>
      <description>orca-harbor + buildconfig 1. image pull secret 추가 Secret name : orca-harbor-secret
Registry server address : orca-harbor.cloud.hancom.com
Username : &amp;ldquo;이름&amp;rdquo;
Password : harbor 접속후 CLI secret 확인
 2. User Profile을 눌러 CLI secret 복사후 사용  3. BuildConfig 사용 예제1 apiVersion: build.openshift.io/v1 kind: BuildConfig metadata:  name: testblog  namespace: okd-tutorial  labels:  app.kubernetes.io/name: testblog spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: &amp;#39;image 경로&amp;#39;  pushSecret:  name: &amp;#39;orca-harbor-secret&amp;#39;  source:  git:  ref: master  uri: &amp;#39;https://github.</description>
    </item>
    
    <item>
      <title>Test</title>
      <link>https://bluewhale-users.github.io/ko/post/test/</link>
      <pubDate>Fri, 11 Mar 2022 12:14:58 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/ko/post/test/</guid>
      <description>테스트입니다.</description>
    </item>
    
  </channel>
</rss>

[
{
	"uri": "https://bluewhale-users.github.io/ko/okd/",
	"title": "한컴 클라우드 플랫폼",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/web-console/tutorial1/",
	"title": "Tutorial1 : Overview",
	"tags": [],
	"description": "",
	"content": "1. Web-Console 접속 화면  웹 콘솔은 브라우져를 통해 OKD를 액세스할 수 있는 사용자 인터페이스입니다.\n사용자는 웹 콘솔을 통해 프로젝트의 내용을 시각적으로 관리할 수 있습니다.\n웹 콘솔은 Administrator/Developer 두가지 관점을 제공합니다.\n개발자관점은 개발과 관련된 워크플로를 제공합니다.\n 애플리케이션 배포 프로젝트의 애플리케이션및 구성요소의 시각화 배포 및 빌드 상태 모니터링 구성요소 그룹화  1.1 개발자 관점 액세스  좌측 상단의 전환 기능을 선택해 Developer로 변경한다.    프로젝트에 워크로드 또는 애플리케이션이 없는 경우 Topology 뷰에는 사용 가능한 옵션이 표시됩니다.    워크로드가 있는 경우 Topology 뷰는 워크로드 노드를 그래픽 요소로 표시합니다.  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cli/cli1/",
	"title": "CLI : oc 설정",
	"tags": [],
	"description": "",
	"content": " okd github okd documentation oc download  Kubernetes의 명령줄 인터페이스(CLI) kubectl는 Kubernetes 클러스터에 대해 명령을 실행하는 데 사용됩니다. OKD는 Kubernetes 클러스터 위에서 실행되기 때문에 kubectl도 oc CLI에 포함됩니다.\n\r1. oc download  oc download  OS에 맞게 실행파일을 다운로드한다.   OKD web-console에서 직접 다운로드  우측 상단의 about 링크를 눌러 Command line tools로 이동해 다운로드 받을 수 있다.      2. 압축 해제  적당한 경로에 압축을 해제한다.  3. 환경변수 편집  환경변수에 경로 추가  window + Q로 검색창을 연 뒤 환경 변수를 검색해서 환경 변수 선택 시스템변수의 Path를 더블클릭한다. 새로 만들기를 클릭한 다음 압축을 풀었던 곳의 경로를 등록   command에서 oc version을 쳐서 확인  windows\rMacOS\r\rC:\\Users\\user\u0026gt;oc version Client Version: 4.8.0-0.okd-2021-11-14-052418 error: You must be logged in to the server (Unauthorized) \r\r# 패키지 관리자로 다운로드 $ brew install openshift-cli # 직접 다운로드후 압축해제 $ tar xvzf \u0026lt;file\u0026gt; $ echo $PATH $ oc version \r\r\r\r4. 로그인 oc login [URL] [options] \rwindows\r\rC:\\Users\\user\u0026gt;oc login --token=sha256~HH2JyDxeBpYg******************** --server=https://api.your-okd.com:6443 Logged into \u0026#34;api.your-okd.com:6443\u0026#34; as \u0026#34;user@your-okd.com\u0026#34; using the token provided. You have access to 97 projects, the list has been suppressed. You can list all projects with \u0026#39;oc projects\u0026#39; Using project \u0026#34;okd-tutorial\u0026#34;. \r\r\r\r-p, \u0026ndash;password = \u0026quot; − Password, will prompt if not provided\n-u, \u0026ndash;username = \u0026quot; − Username, will prompt if not provided\n\u0026ndash;certificate-authority = \u0026quot; − Path to a cert. file for the certificate authority\n\u0026ndash;insecure-skip-tls-verify = false − If true, the server\u0026rsquo;s certificate will not be checked for validity. This will make your HTTPS connections insecure\n\u0026ndash;token = \u0026quot; − Bearer token for authentication to the API server\nTo get the complete details regarding any command, use the oc \u0026ndash;help command.\n\r5. 로그아웃 oc logout $ oc logout Logged \u0026#34;user@your-okd.com\u0026#34; out on \u0026#34;https://api.your-okd.com:6443\u0026#34; 6. CLI Configuration Files  CLI Configuration file을 통해 사용자 정보를 관리하며 여러 프로필을 설정해 전환이 가능한다. \u0026ldquo;~/.kube/config\u0026quot;에 저장된다.  $ oc config view apiVersion: v1 clusters: - cluster: insecure-skip-tls-verify: true server: https://api.your-okd.com:6443 name: api.your-okd.com:6443 contexts: - context: cluster: api.your-okd.com:6443 namespace: tutorial-project user: user@your-okd.com/api.your-okd.com:6443 name: tutorial-project/api.your-okd.com:6443/user@your-okd.com current-context: nginx-proxy/api.your-okd.com:6443/user@your-okd.com kind: Config preferences: {} users: - name: user@your-okd.com/api.your-okd.com:6443 user: token: REDACTED  context 조회  $ oc whoami -c nginx-proxy/api.your-okd.com:6443/user@your-okd.com 7. oc status 명령  프로젝트의 구성 요소 및 관계등을 파악할수 있다.  $ oc status In project nginx-proxy on server https://api.your-okd.com:6443 svc/argocd-sample-dex-server - 172.30.46.161 ports 5556, 5557 deployment/argocd-sample-dex-server deploys ghcr.io/dexidp/dex@sha256:6b3cc1c385fbc7542244614e4432f2546c619b7850d44d2379c598309a06bed8 deployment #3 running for 4 weeks - 1 pod deployment #2 deployed 2 months ago deployment #1 deployed 3 months ago svc/argocd-sample-metrics - 172.30.232.17:8082 statefulset/argocd-sample-application-controller manages quay.io/argoproj/argocd@sha256:bac1aeee8e78e64d81a633b9f64148274abfa003165544354e2ebf1335b6ee73 created 3 months ago - 1 pod svc/argocd-sample-redis - 172.30.61.181:6379 deployment/argocd-sample-redis deploys redis@sha256:4be7fdb131e76a6c6231e820c60b8b12938cf1ff3d437da4871b9b2440f4e385 deployment #1 running for 3 months - 1 pod svc/argocd-sample-repo-server - 172.30.216.33 ports 8081, 8084 deployment/argocd-sample-repo-server deploys quay.io/argoproj/argocd@sha256:bac1aeee8e78e64d81a633b9f64148274abfa003165544354e2ebf1335b6ee73 deployment #3 running for 4 weeks - 1 pod deployment #2 deployed 2 months ago deployment #1 deployed 3 months ago svc/argocd-sample-server-metrics - 172.30.21.153:8083 https://argocd-sample-server-nginx-proxy.apps.blackwhale.cloud.hancom.com (passthrough) to pod port https (svc/argocd-sample-server) deployment/argocd-sample-server deploys quay.io/argoproj/argocd@sha256:bac1aeee8e78e64d81a633b9f64148274abfa003165544354e2ebf1335b6ee73 deployment #3 running for 4 weeks - 1 pod deployment #2 deployed 2 months ago deployment #1 deployed 3 months ago http://nginx-sample-nginx-proxy.apps.blackwhale.cloud.hancom.com to pod port 8080-tcp (svc/nginx-sample) deployment/nginx-sample deploys istag/nginx-sample:latest deployment #2 running for 4 months - 1 pod deployment #1 deployed 4 months ago deployment/argo-tag-test deploys orca-harbor.cloud.hancom.com/test-harbor/tag:latest deployment #2 running for 3 months - 0/1 pods deployment #1 deployed 3 months ago bc/nginx-sample source builds https://github.com/sclorg/nginx-ex.git on openshift/nginx:1.18-ubi7 -\u0026gt; istag/nginx-sample:$OPENSHIFT_BUILD_COMMIT build #4 failed 3 months ago - 65a79f2: Merge pull request #23 from multi-arch/imagestreams (Petr Hracek \u0026lt;phracek@redhat.com\u0026gt;) build #1 succeeded 4 months ago - 65a79f2: Merge pull request #23 from multi-arch/imagestreams (Petr Hracek \u0026lt;phracek@redhat.com\u0026gt;) Errors: * build/nginx-sample-4 has failed. 1 error, 12 warnings, 4 infos identified, use \u0026#39;oc status --suggest\u0026#39; to see details. "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee1/",
	"title": "Apigee1 : 소개",
	"tags": [],
	"description": "",
	"content": "Apigee 소개  Apigee 기술문서 Apigee 문서 Choosing between service management and API management  1. 요약 Apigee는 API 개발 및 관리를 위한 플랫폼입니다. Apigee는 프록시 레이어와 함께 서비스를 전면에 내세워 백엔드 서비스 API의 추상화 또는 퍼사드를 제공하고 보안, 비율 제한, 할당량, 분석 등을 제공합니다.\n\r2. Apigee 사용 목적  전체 API 수명 주기 기능으로 API 프로그램 빌드 및 확장 유연한 개발자 포털 옵션으로 API 사용 촉진 전체 API 가치 사슬에서 활용 가능한 분석 정보 확보 API 제품으로 수익을 창출하고 디지털 자산의 비즈니스 가치 극대화  3. Apigee Architecture  Apigee 서비스: API 프록시를 생성, 관리, 배포하는 데 사용하는 API입니다. Apigee 런타임: Google이 Kubernetes 클러스터에서 유지관리하는 컨테이너화된 런타임 서비스 집합입니다. 모든 API 트래픽이 통과되어 이러한 서비스에 의해 처리됩니다. GCP1 서비스: ID 관리, 로깅, 분석, 측정항목, 프로젝트 관리 기능을 제공합니다. 백엔드 서비스: 앱에서 API 프록시의 데이터에 대한 런타임 액세스를 제공하기 위해 사용합니다  Apigee high-level overview   [출처] https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee  4. Architecture Detail  비공개 피어링 네트워크를 통해 Cloud 프로젝트와 Google 서비스 간의 연결을 보여주는 세부적인 그림입니다.  Apigee architecture   [출처] https://cloud.google.com/apigee/docs/api-platform/get-started/what-apigee  5. Apigee 유형  Apigee  Apigee가 환경을 유지관리하는 호스팅된 SaaS 버전으로, 서비스를 빌드하고 해당 서비스에 API를 정의하는 데 집중할 수 있습니다.   Apigee Hybrid  온프레미스 또는 선택한 클라우드 제공업체에 설치된 런타임 영역과, Apigee 클라우드에서 실행되는 관리 영역으로 구성된 하이브리드 버전입니다. 이 모델에서는 사용자의 자체 기업 승인을 받은 경계 내에서 API 트래픽 및 데이터가 제한됩니다.    6. Apigee 서비스 이용시 이점  Apigee를 사용하면 서비스 구현에 관계없이 모든 서비스에서 명확하게 정의되고 일관된 API를 통해 서비스에 안전하게 액세스할 수 있습니다. 일관된 API를 사용하여 다음 이점을 활용할 수 있습니다.  앱 개발자가 서비스를 쉽게 사용할 수 있습니다. 공개 API에 영향을 미치지 않고 백엔드 서비스 구현을 변경할 수 있습니다. Apigee에 내장된 분석, 개발자 포털, 기타 기능을 활용할 수 있습니다.    서비스 관리와 API 관리 차이 Overview  Service management  서비스 관리는 서비스 메시로 수행됩니다. 서비스 간 통신을 관리하며 서비스 정책 또는 원격 측정에 대한 전반적인 서비스를 처리하는 데 중점을 둡니다.   API management  API 관리는 일반적으로 API 플랫폼으로 수행됩니다. API 수명 주기 관리에 관한 모든것이며, API 게시, 소비, 거버넌스 및 소비자의 API 사용 분석 수신에 맞춰져 있습니다.    Modernization journey(기업의 현대화)  Service management와 API management 2가지 요소는 기업 현대화의 필수 요소입니다. 문제는 어느것을 선택해야 하는것이 아니라 언제 어디서 선택하느냐 하는것입니다. 현대화 과정의 현재 위치에 따라 둘 중 하나를 선택할 수 있습니다. 또는 하나의 사용 사례에 대해 API 관리를 선택하고 다른 사용 사례를 사용하여 비지니스의 다른 부분에 대해 서비스 관리를 선택할 수 있습니다.  Modernization journey의 목표  클라우드 네이티브 기술로 애플리케이션을 현대화하여 소프트웨어를 더 빠르게 제공 개발자, 파트너 및 고객에게 고유한 방법을 제공하여 비지니스를 혁신  두 가지 목표를 모두 달성하려면 서비스 관리와 AIP 관리가 모두 필요합니다.\n서비스 관리 또는 API 관리를 선택할 위치와 시기를 결정할수 있는 시나리오  Standardize service policies for an internal platform  조직이 표준화돤 보안정책 및 제어에 대한 요구 사항을 가진 내부 플랫폼을 구축하려고 할 때    use cases\n  Standardize service polices for an internal platform\n조직이 표준화된 보안정책 및 제어에 대한 요구 사항을 가진 내부 플랫폼을 구축하고 있을때 Service management 계층은 해당 플랫폼 내에서 트래픽을 보호하고 제어하는 데 필요한 모든 기능을 제공합니다.\n  Monitor services and set Service-level Objectives(SLOs)\n다음으로 SRE팀은 해당 플랫폼 내 서비스의 상태와 성능을 모니터링하려고 합니다. 이 시나리오에서 서비스 관리는 SLO를 설정하고 경고를 받을수 있도록 메트릭, 로그 및 추적을 팀에 제공할 수 있습니다.\n  Configure networking components for services communication\n그리고 팀의 네트워크 운영자가 하이브리드 또는 다중 클라우드 상황에서 서비스가 클러스터간 통신할 수 있도록 네트워킹 구성해야 할 경우에는 어떻게 할까요? 서비스 관리는 이러한 환경 및 구성 요소에서 네트워킹을 표준화하는 방법을 제공합니다. 이제 이 플랫폼이 기업내의 사업부에서 소유하고 있다록 상상해 보십시오\n  Build a shared service model internally\n이들은 다른 사업부가 이러한 표준화된 서비스 중 일부를 API로 발견하고 재사용할 수 있는 공유 서비스 모델을 설정하기를 원할 수 있습니다. 이 경우 목표는 사용 가능한 API와 사용 방법에 대해 신뢰 영역 외부에 있는 다른 팀에 쉽게 가시성을 제공합는 것입니다. API management platform은 이러한 프로세스를 관리하는 좋은 방법입니다. 이러한 API를 다른 팀에 노출하는 매커니즘을 제공하고, 이러한 서비스에 대한 액세스를 제공하고, 분석을 통해 API 사용량을 측정하는 도구를 제공합니다. 여기에서 이 조직은 이제 제 3자 파트너와 개발자를 결합하려는 시점에 있습니다. 이는 오픈 뱅킹과 같은 업계 관행을 따르거나 비지니스 모델을 새로운 채널로 확장하기 위한 것일 수 있습니다. 마지막 사용 사례와 유사하게 API 관리 플랫폼ㅇ르 사용하면 조직 외부에 해당 서비스를 안전하게 노출하고 도구를 제공하며 손쉬운 온보딩 및 액세를 제공할 수 있습니다.\n  Monetize APIs\n이제 이러한 모든 이해 관계자에게 해당 API에 대한 액세스 권한을 부여했으므로 API가 어떻게 사용되는지 확인하고 잠재적으로 일부 수익창출 기회를 탐색할 수 있습니다. 이것은 API management platform에 매우 적합한 시나리오입니다. API 소비 및 성장에 대한 가시성을 확보하고 어떤 API가 가치가 있는지 판단하고, 제3자에게 비용을 청구하려는 API주변에 수익창출 모델을 배치 할 수 있습니다.\n  이 둘을 함께 사용하여 구축중인 플랫폼에 대해 서로 다른 기능을 수행하도록 할 수 있습니다.\nService to service communicatin : Service management(Anthos Service Mesh)\n https://cloud.google.com/anthos/service-mesh\n Sharing APIs outside your domain of trust : API management(Apigee)\n https://cloud.google.com/apigee\n 7. Apigee 가격 정책 참고\n   평가 표준 엔터프라이즈 엔터프라이즈 플러스     월별 API 호출 100,000회 연간 API 호출 1억 8,000만 회 연간 API 호출 12억 회 연간 API 호출 120억 회   환경 2개 조직 1개 및 환경 5개 조직 2개 및 환경 10개 조직 6개 및 환경 30개   애널리틱스 보고서 30일 애널리틱스 보고서 30일 애널리틱스 보고서 3개월 애널리틱스 보고서 14개월   런타임 SLA 없음 99% 런타임 SLA 99.9% 런타임 SLA 99.99% 런타임 SLA   유료 서비스로의 마이그레이션 불가  하이브리드 배포 지원 하이브리드 배포 지원   60일 후 평가 종료   엔터프라이즈 플러스    8. Service Level Agreement (SLA) 참고\n   Covered Service Monthly Uptime Percentage     Apigee Standard \u0026gt;= 99%   Apigee Enterprise \u0026gt;= 99.99% for environments provisioned in 2 or more Regions (i.e., with the purchase of Additional Region / Distributed Network) with a dual-region, multi-regional, or global Cloud KMS encryption key, or \u0026gt;= 99.9% for all other environments   Apigee Enterprise Plus \u0026gt;= 99.99% for environments provisioned in 2 or more Regions with a dual-region, multi-regional, or global Cloud KMS encryption key, or \u0026gt;= 99.9% for all other environments      Google Cloud Platform은 전 세계 사용자들에게 구글 내부 인프라를 사용할 수 있도록 해 주 는 제품 모음입니다. 이 모음에는 구글 Compute Engine을 통한 주문형 가상 머신이나 Google Cloud Storage를 통한 파일 저장용 오브젝트 스토리지같이 다른 클라우드 서비스 업체에서도 공통적으로 제공하는 여러 기능이 포함되어 있습니다. 또한, Bigtable, Cloud Datastore 또는 Kubernetes와 같은 구글이 만든 고급 기술에 대한 API도 포함하고 있습니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo1/",
	"title": "Hugo1 : Hugo 소개",
	"tags": [],
	"description": "",
	"content": "1. Hugo  gohugo.io hugo github shortcodes  휴고(Hugo)는 Go로 작성된 정적 사이트1 생성기입니다. 웹페이지 접속시 실시간으로 페이지를 생성하는 동적사이트2와 달리 휴고는 컨텐츠를 만들거나 업데이트시 페이지를 생성합니다. 따라서 휴고로 구축된 웹사이트는 일반적으로 더 빠르고 안전합니다.\n장점\n 빌드 시간이 매우 빠르다. 다양한 OS에서 쉽게 설치하여 개발할 수 있다. LiveReload 기능을 제공해 변경사항을 즉시 렌더링해 확인할 수 있다. 다양한 테마가 존재한다. 정적 사이트를 렌더링하므로 제한없이 모든곳에서 호스팅할 수 있다.    static site는 고정된 html을 그냥 뿌려주는 사이트이다. 따라서 static site를 쓴다면 언제 들어간다고 해도 항상 같은 화면만 나온다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Dynamic site 그때그때 동적으로 html을 생성해서 보여주는 사이트다. 즉, dynamic site의 화면은 같은 주소라도 지속적으로 변할 수 있다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial1/",
	"title": "Tutorial1 : 준비",
	"tags": [],
	"description": "",
	"content": "1. OKD CI/CD 소개  CI/CD Flow with Argo CD   [출처] https://www.gspann.com/resources/blogs/continuous-delivery-for-kubernetes-with-gitops-and-argo-cd/\n\u0026lsquo;GitOps\u0026rsquo;는 형상 관리 도구인 \u0026lsquo;Git\u0026rsquo; 을 통해 개발자에게 익숙한 방식으로 인프라 또는 어플리케이션의 선언적인 설정파일을 관리하고 배포하는 일련의 프로세스를 말합니다. 이 튜토리얼은 어플리케이션 소스를 담고있는 Source Repository와 OKD에 배포를 위한 설정(manifest files)들을 담고 있는 GitOps Repository 2개의 리파지터리가 필요합니다.\n\r2. OKD CI/CD 프로세스  Source 리파지터리에 변경사항을 Commit 한다. Jenkins에서 변경사항을 감지하고 빌드를 수행한다. Docker Image를 dockerhub에 Push한다. GitOps 리파지터리의 deployment manifest파일을 업데이트(tag version)한다. ArgoCD가 변경사항을 감지하고 자동 배포 수행한다.  3. 사전 준비  GitHub repository Deploy Key dockerhub 계정 및 Repositiry okd 계정  4. 일회성 인스턴스 사용하는 이유 프로젝트용 일회성 Jenkins와 ArgoCD 인스턴스를 사용하는 이유는 다음과 같습니다.\n 다중 사용자의 경우 관리하기 어렵다. 여러 플러그인 설치로 인해 충돌 가능성이 높다.  5. URL References  GitHub Source GitHub Gitops DockerHub  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/web-console/tutorial2/",
	"title": "Tutorial2 : 프로젝트 만들기",
	"tags": [],
	"description": "",
	"content": "1. 프로젝트 만들기  Administrator -\u0026gt; Home -\u0026gt; Projects 이동    2. Create Project 선택  Name, Display name, Description 입력    3. 프로젝트 생성 화면  4. 개발자(Developer)관점 보기로 전환  5. 토폴로지 화면  현재 빈프로젝트이기 때문에 아무것도 보이지 않는다.    5. Application 배포해보기  화면에서 우클릭하여 메뉴 확인(Samples 선택)    6. 코드 샘플을 사용하여 어플리케이션을 생성(Nginx)  Nginx 선택    7. Name 입력(my-nginx-sample)  source github    8. 빌드중 상태가 종료될때까지 대기한다.  9. 빌드 성공  10. OpenURL을 통해 서비스에 접속   접속 화면     11. 코드 샘플을 사용하여 어플리케이션을 생성(node.js)  Node.js 선택 source github    12. 샘플 어플리케이션 생성 화면  이름변경(나머지는 기본값 사용)후 create를 클릭한다.    13. 빌드중 상태가 종료될때까지 대기한다.  14. 빌드 성공  15. OpenURL을 통해 서비스에 접속   접속 화면\n   16. DB 연결   방문 횟수가 카운트되어 보여야 하지만 DB 연결 실패 메시지가 출력된다.    oc cli를 사용해 MongoDB 배포\n  windows\r\r#project를 위에서 생성한 프로젝트로 변경한다. $ oc project okd-tutorials\rNow using project \u0026#34;okd-tutorials\u0026#34; on server \u0026#34;https://api.your-okd.com:6443\u0026#34;. \r\r\r\r mongo-db 배포  windows\r\r$ oc new-app centos/mongodb-26-centos7 \\\r-e MONGODB_USER=admin \\\r-e MONGODB_DATABASE=mongo_db \\\r-e MONGODB_PASSWORD=secret \\\r-e MONGODB_ADMIN_PASSWORD=super-secret \r\r\r\rC:\\Users\\user\u0026gt;oc new-app centos/mongodb-26-centos7 -e MONGODB_USER=admin -e MONGODB_DATABASE=mongo_db -e MONGODB_PASSWORD=secret -e MONGODB_ADMIN_PASSWORD=super-secret\r--\u0026gt; Found container image ed70d49 (3 years old) from Docker Hub for \u0026#34;centos/mongodb-26-centos7\u0026#34;\rMongoDB 2.6\r-----------\rMongoDB (from humongous) is a free and open-source cross-platform document-oriented database program. Classified as a NoSQL database program, MongoDB uses JSON-like documents with schemas. This container image contains programs to run mongod server.\rTags: database, mongodb, rh-mongodb26\r* An image stream tag will be created as \u0026#34;mongodb-26-centos7:latest\u0026#34; that will track this image\r--\u0026gt; Creating resources ...\rdeployment.apps \u0026#34;mongodb-26-centos7\u0026#34; created\rservice \u0026#34;mongodb-26-centos7\u0026#34; created\r--\u0026gt; Success\rApplication is not exposed. You can expose services to the outside world by executing one or more of the commands below:\r\u0026#39;oc expose service/mongodb-26-centos7\u0026#39;\rRun \u0026#39;oc status\u0026#39; to view your app.  oc status로 상태 확인  $ oc status\rIn project okd turotials (okd-tutorials) on server https://api.your-okd.com:6443\rsvc/mongodb-26-centos7 - 172.30.127.231:27017\rdeployment/mongodb-26-centos7 deploys istag/mongodb-26-centos7:latest\rdeployment #2 running for 2 minutes - 0/1 pods growing to 1\rdeployment #1 deployed 2 minutes ago - 0/1 pods growing to 1\rhttp://my-nodejs-sample-okd-tutorials.apps.api.your-okd.com to pod port 8080-tcp (svc/my-nodejs-sample)\rdeployment/my-nodejs-sample deploys istag/my-nodejs-sample:latest \u0026lt;-\rbc/my-nodejs-sample source builds https://github.com/sclorg/nodejs-ex.git on openshift/nodejs:14-ubi7\rdeployment #2 running for 24 minutes - 0/1 pods growing to 1\rdeployment #1 deployed 35 minutes ago - 1 pod\r2 infos identified, use \u0026#39;oc status --suggest\u0026#39; to see details. \rMongoDB 인스턴스 URL : 172.30.127.231:27017\nNodejs Deployment : deployment/my-nodejs-sample\n\r  MongoDB 인스턴스 URL 확인(172.30.127.231:27017)\n  Pod 환경 변수 확인\n  oc set env pods --all --list $ oc set env pods --all --list\r# pods/my-nodejs-sample-1-build, container sti-build\rBUILD={\u0026#34;kind\u0026#34;:\u0026#34;Build\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;build.openshift.io/v1\u0026#34;,\u0026#34;metadata\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;my-nodejs-sample-1\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;okd-tutorials\u0026#34;,\u0026#34;uid\u0026#34;:\u0026#34;c8217c38-6604-49ac-94f1-fff0afd6728e\u0026#34;,\u0026#34;resourceVersion\u0026#34;:\u0026#34;317857363\u0026#34;,\u0026#34;generation\u0026#34;:1,\u0026#34;creationTimestamp\u0026#34;:\u0026#34;2022-04-07T03:26:42Z\u0026#34;,\u0026#34;labels\u0026#34;:{\u0026#34;app\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;app.kubernetes.io/component\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;app.kubernetes.io/instance\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;app.kubernetes.io/name\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;app.kubernetes.io/part-of\u0026#34;:\u0026#34;sample-app\u0026#34;,\u0026#34;app.openshift.io/runtime\u0026#34;:\u0026#34;nodejs\u0026#34;,\u0026#34;app.openshift.io/runtime-version\u0026#34;:\u0026#34;14-ubi7\u0026#34;,\u0026#34;buildconfig\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;openshift.io/build-config.name\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;openshift.io/build.start-policy\u0026#34;:\u0026#34;Serial\u0026#34;},\u0026#34;annotations\u0026#34;:{\u0026#34;openshift.io/build-config.name\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;openshift.io/build.number\u0026#34;:\u0026#34;1\u0026#34;},\u0026#34;ownerReferences\u0026#34;:[{\u0026#34;apiVersion\u0026#34;:\u0026#34;build.openshift.io/v1\u0026#34;,\u0026#34;kind\u0026#34;:\u0026#34;BuildConfig\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;,\u0026#34;uid\u0026#34;:\u0026#34;e8bdacd0-e875-498c-b9ec-0e83ae10b9f0\u0026#34;,\u0026#34;controller\u0026#34;:true}],\u0026#34;managedFields\u0026#34;:[{\u0026#34;manager\u0026#34;:\u0026#34;openshift-apiserver\u0026#34;,\u0026#34;operation\u0026#34;:\u0026#34;Update\u0026#34;,\u0026#34;apiVersion\u0026#34;:\u0026#34;build.openshift.io/v1\u0026#34;,\u0026#34;time\u0026#34;:\u0026#34;2022-04-07T03:26:42Z\u0026#34;,\u0026#34;fieldsType\u0026#34;:\u0026#34;FieldsV1\u0026#34;,\u0026#34;fieldsV1\u0026#34;:{\u0026#34;f:metadata\u0026#34;:{\u0026#34;f:annotations\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:openshift.io/build-config.name\u0026#34;:{},\u0026#34;f:openshift.io/build.number\u0026#34;:{}},\u0026#34;f:labels\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:app\u0026#34;:{},\u0026#34;f:app.kubernetes.io/component\u0026#34;:{},\u0026#34;f:app.kubernetes.io/instance\u0026#34;:{},\u0026#34;f:app.kubernetes.io/name\u0026#34;:{},\u0026#34;f:app.kubernetes.io/part-of\u0026#34;:{},\u0026#34;f:app.openshift.io/runtime\u0026#34;:{},\u0026#34;f:app.openshift.io/runtime-version\u0026#34;:{},\u0026#34;f:buildconfig\u0026#34;:{},\u0026#34;f:openshift.io/build-config.name\u0026#34;:{},\u0026#34;f:openshift.io/build.start-policy\u0026#34;:{}},\u0026#34;f:ownerReferences\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;k:{\\\u0026#34;uid\\\u0026#34;:\\\u0026#34;e8bdacd0-e875-498c-b9ec-0e83ae10b9f0\\\u0026#34;}\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:apiVersion\u0026#34;:{},\u0026#34;f:controller\u0026#34;:{},\u0026#34;f:kind\u0026#34;:{},\u0026#34;f:name\u0026#34;:{},\u0026#34;f:uid\u0026#34;:{}}}},\u0026#34;f:spec\u0026#34;:{\u0026#34;f:output\u0026#34;:{\u0026#34;f:to\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:kind\u0026#34;:{},\u0026#34;f:name\u0026#34;:{}}},\u0026#34;f:serviceAccount\u0026#34;:{},\u0026#34;f:source\u0026#34;:{\u0026#34;f:git\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:uri\u0026#34;:{}},\u0026#34;f:type\u0026#34;:{}},\u0026#34;f:strategy\u0026#34;:{\u0026#34;f:sourceStrategy\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:from\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:kind\u0026#34;:{},\u0026#34;f:name\u0026#34;:{}},\u0026#34;f:pullSecret\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:name\u0026#34;:{}}},\u0026#34;f:type\u0026#34;:{}},\u0026#34;f:triggeredBy\u0026#34;:{}},\u0026#34;f:status\u0026#34;:{\u0026#34;f:conditions\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;k:{\\\u0026#34;type\\\u0026#34;:\\\u0026#34;New\\\u0026#34;}\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:lastTransitionTime\u0026#34;:{},\u0026#34;f:lastUpdateTime\u0026#34;:{},\u0026#34;f:status\u0026#34;:{},\u0026#34;f:type\u0026#34;:{}}},\u0026#34;f:config\u0026#34;:{\u0026#34;.\u0026#34;:{},\u0026#34;f:kind\u0026#34;:{},\u0026#34;f:name\u0026#34;:{},\u0026#34;f:namespace\u0026#34;:{}},\u0026#34;f:phase\u0026#34;:{}}}}]},\u0026#34;spec\u0026#34;:{\u0026#34;serviceAccount\u0026#34;:\u0026#34;builder\u0026#34;,\u0026#34;source\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;Git\u0026#34;,\u0026#34;git\u0026#34;:{\u0026#34;uri\u0026#34;:\u0026#34;https://github.com/sclorg/nodejs-ex.git\u0026#34;}},\u0026#34;strategy\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;Source\u0026#34;,\u0026#34;sourceStrategy\u0026#34;:{\u0026#34;from\u0026#34;:{\u0026#34;kind\u0026#34;:\u0026#34;DockerImage\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;image-registry.openshift-image-registry.svc:5000/openshift/nodejs@sha256:a49baf4d9de05b879d319356aa9349f4ad9962fd5859f2e7029e2da1559a8d2d\u0026#34;},\u0026#34;pullSecret\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;builder-dockercfg-2h2dq\u0026#34;}}},\u0026#34;output\u0026#34;:{\u0026#34;to\u0026#34;:{\u0026#34;kind\u0026#34;:\u0026#34;DockerImage\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;image-registry.openshift-image-registry.svc:5000/okd-tutorials/my-nodejs-sample:latest\u0026#34;},\u0026#34;pushSecret\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;builder-dockercfg-2h2dq\u0026#34;}},\u0026#34;resources\u0026#34;:{},\u0026#34;postCommit\u0026#34;:{},\u0026#34;nodeSelector\u0026#34;:null,\u0026#34;triggeredBy\u0026#34;:[{\u0026#34;message\u0026#34;:\u0026#34;Build configuration change\u0026#34;}]},\u0026#34;status\u0026#34;:{\u0026#34;phase\u0026#34;:\u0026#34;New\u0026#34;,\u0026#34;outputDockerImageReference\u0026#34;:\u0026#34;image-registry.openshift-image-registry.svc:5000/okd-tutorials/my-nodejs-sample:latest\u0026#34;,\u0026#34;config\u0026#34;:{\u0026#34;kind\u0026#34;:\u0026#34;BuildConfig\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;okd-tutorials\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;my-nodejs-sample\u0026#34;},\u0026#34;output\u0026#34;:{},\u0026#34;conditions\u0026#34;:[{\u0026#34;type\u0026#34;:\u0026#34;New\u0026#34;,\u0026#34;status\u0026#34;:\u0026#34;True\u0026#34;,\u0026#34;lastUpdateTime\u0026#34;:\u0026#34;2022-04-07T03:26:42Z\u0026#34;,\u0026#34;lastTransitionTime\u0026#34;:\u0026#34;2022-04-07T03:26:42Z\u0026#34;}]}}\rLANG=C.utf8\rSOURCE_REPOSITORY=https://github.com/sclorg/nodejs-ex.git\rSOURCE_URI=https://github.com/sclorg/nodejs-ex.git\rALLOWED_UIDS=1-\rDROP_CAPS=KILL,MKNOD,SETGID,SETUID\rPUSH_DOCKERCFG_PATH=/var/run/secrets/openshift.io/push\rPULL_DOCKERCFG_PATH=/var/run/secrets/openshift.io/pull\rBUILD_REGISTRIES_CONF_PATH=/var/run/configs/openshift.io/build-system/registries.conf\rBUILD_REGISTRIES_DIR_PATH=/var/run/configs/openshift.io/build-system/registries.d\rBUILD_SIGNATURE_POLICY_PATH=/var/run/configs/openshift.io/build-system/policy.json\rBUILD_STORAGE_CONF_PATH=/var/run/configs/openshift.io/build-system/storage.conf\rBUILD_STORAGE_DRIVER=overlay\rBUILD_BLOBCACHE_DIR=/var/cache/blobs\rHTTP_PROXY=\rHTTPS_PROXY=\rNO_PROXY=\r# pods/my-nodejs-sample-564c48b655-sr592, container my-nodejs-sample  Node.js 웹앱에 환경 변수를 추가  oc set env deployment/my-nodejs-sample MONGO_URL=\u0026#39;mongodb://admin:secret@172.30.127.231:27017/mongo_db\u0026#39; $ oc set env deployment/my-nodejs-sample MONGO_URL=\u0026#39;mongodb://admin:secret@172.30.127.231:27017/mongo_db\u0026#39;\rdeployment.apps/my-nodejs-sample updated  업데이트 배포 확인  $ oc status\rIn project okd turotials (okd-tutorials) on server https://your-okd.com:6443\rsvc/mongodb-26-centos7 - 172.30.127.231:27017\rdeployment/mongodb-26-centos7 deploys istag/mongodb-26-centos7:latest\rdeployment #2 running for 24 minutes - 0/1 pods growing to 1\rdeployment #1 deployed 24 minutes ago - 0/1 pods growing to 1\rhttp://my-nodejs-sample-okd-tutorials.apps.blackwhale.cloud.hancom.com to pod port 8080-tcp (svc/my-nodejs-sample)\rdeployment/my-nodejs-sample deploys istag/my-nodejs-sample:latest \u0026lt;-\rbc/my-nodejs-sample source builds https://github.com/sclorg/nodejs-ex.git on openshift/nodejs:14-ubi7\rdeployment #3 running for 2 minutes - 0/1 pods growing to 1\rdeployment #2 deployed 46 minutes ago\rdeployment #1 deployed 57 minutes ago - 1 pod\r2 infos identified, use \u0026#39;oc status --suggest\u0026#39; to see details.  환경설정 확인  $ oc set env pods --all --list\r...........\rLANG=C.utf8\rSOURCE_REPOSITORY=https://github.com/sclorg/nodejs-ex.git\rSOURCE_URI=https://github.com/sclorg/nodejs-ex.git\rALLOWED_UIDS=1-\rDROP_CAPS=KILL,MKNOD,SETGID,SETUID\rPUSH_DOCKERCFG_PATH=/var/run/secrets/openshift.io/push\rPULL_DOCKERCFG_PATH=/var/run/secrets/openshift.io/pull\rBUILD_REGISTRIES_CONF_PATH=/var/run/configs/openshift.io/build-system/registries.conf\rBUILD_REGISTRIES_DIR_PATH=/var/run/configs/openshift.io/build-system/registries.d\rBUILD_SIGNATURE_POLICY_PATH=/var/run/configs/openshift.io/build-system/policy.json\rBUILD_STORAGE_CONF_PATH=/var/run/configs/openshift.io/build-system/storage.conf\rBUILD_STORAGE_DRIVER=overlay\rBUILD_BLOBCACHE_DIR=/var/cache/blobs\rHTTP_PROXY=\rHTTPS_PROXY=\rNO_PROXY=\r# pods/my-nodejs-sample-7598dc4c8d-htfk6, container my-nodejs-sample\rMONGO_URL=\u0026#39;mongodb://admin:secret@172.30.127.231:27017/mongo_db\u0026#39; 17. mongodb 배포 화면  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cli/cli2/",
	"title": "Cli2 : Basic Commands",
	"tags": [],
	"description": "",
	"content": "   No Command Description     1 new-project Request a new Project   2 new-app Request a new application   3 projects Display existing project   4 project Switch to another project    1. new-project C:\\Users\\user\u0026gt;oc new-project --help Create a new project for yourself. If your administrator allows self-service, this command will create a new project for you and assign you as the project admin. After your project is created it will become the default project in your config. Usage: oc new-project NAME [--display-name=DISPLAYNAME] [--description=DESCRIPTION] [flags] Examples: # Create a new project with minimal information oc new-project web-team-dev # Create a new project with a display name and description oc new-project web-team-dev --display-name=\u0026#34;Web Team Development\u0026#34; --description=\u0026#34;Development project for the web team.\u0026#34; Options: --description=\u0026#39;\u0026#39;: Project description --display-name=\u0026#39;\u0026#39;: Project display name --skip-config-write=false: If true, the project will not be set as a cluster entry in kubeconfig after being created Use \u0026#34;oc options\u0026#34; for a list of global command-line options (applies to all commands). 2. new-app C:\\Users\\user\u0026gt;oc new-app --help Create a new application by specifying source code, templates, and/or images. This command will try to build up the components of an application using images, templates, or code that has a public repository. It will look up the images on the local Docker installation (if available), a container image registry, an integrated image stream, or stored templates. If you specify a source code URL, it will set up a build that takes your source code and converts it into an image that can run inside of a pod. Local source must be in a git repository that has a remote repository that the server can see. The images will be deployed via a deployment or deployment configuration, and a service will be connected to the first public port of the app. You may either specify components using the various existing flags or let oc new-app autodetect what kind of components you have provided. If you provide source code, a new build will be automatically triggered. You can use \u0026#39;oc status\u0026#39; to check the progress. Usage: oc new-app (IMAGE | IMAGESTREAM | TEMPLATE | PATH | URL ...) [flags] Examples: # List all local templates and image streams that can be used to create an app oc new-app --list # Create an application based on the source code in the current git repository (with a public remote) and a Docker image oc new-app . --docker-image=registry/repo/langimage # Create an application myapp with Docker based build strategy expecting binary input oc new-app --strategy=docker --binary --name myapp # Create a Ruby application based on the provided [image]~[source code] combination oc new-app centos/ruby-25-centos7~https://github.com/sclorg/ruby-ex.git # Use the public Docker Hub MySQL image to create an app. Generated artifacts will be labeled with db=mysql oc new-app mysql MYSQL_USER=user MYSQL_PASSWORD=pass MYSQL_DATABASE=testdb -l db=mysql # Use a MySQL image in a private registry to create an app and override application artifacts\u0026#39; names oc new-app --docker-image=myregistry.com/mycompany/mysql --name=private # Create an application from a remote repository using its beta4 branch oc new-app https://github.com/openshift/ruby-hello-world#beta4 # Create an application based on a stored template, explicitly setting a parameter value oc new-app --template=ruby-helloworld-sample --param=MYSQL_USER=admin # Create an application from a remote repository and specify a context directory oc new-app https://github.com/youruser/yourgitrepo --context-dir=src/build # Create an application from a remote private repository and specify which existing secret to use oc new-app https://github.com/youruser/yourgitrepo --source-secret=yoursecret # Create an application based on a template file, explicitly setting a parameter value oc new-app --file=./example/myapp/template.json --param=MYSQL_USER=admin # Search all templates, image streams, and Docker images for the ones that match \u0026#34;ruby\u0026#34; oc new-app --search ruby # Search for \u0026#34;ruby\u0026#34;, but only in stored templates (--template, --image-stream and --docker-image # can be used to filter search results) oc new-app --search --template=ruby # Search for \u0026#34;ruby\u0026#34; in stored templates and print the output as YAML oc new-app --search --template=ruby --output=yaml Options: --allow-missing-images=false: If true, indicates that referenced Docker images that cannot be found locally or in a registry should still be used. --allow-missing-imagestream-tags=false: If true, indicates that image stream tags that don\u0026#39;t exist should still be used. --allow-missing-template-keys=false: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats. --as-deployment-config=false: If true create this application as a deployment config, which allows for hooks and custom strategies. --as-test=false: If true create this application as a test deployment, which validates that the deployment succeeds and then scales down. --binary=false: Instead of expecting a source URL, set the build to expect binary contents. Will disable triggers. --build-env=[]: Specify a key-value pair for an environment variable to set into each build image. --build-env-file=[]: File containing key-value pairs of environment variables to set into each build image. --code=[]: Source code to use to build this application. --context-dir=\u0026#39;\u0026#39;: Context directory to be used for the build. --docker-image=[]: Name of a Docker image to include in the app. Note: not specifying a registry or repository means defaults in place for client image pulls are employed. --dry-run=false: If true, show the result of the operation without performing it. -e, --env=[]: Specify a key-value pair for an environment variable to set into each container. --env-file=[]: File containing key-value pairs of environment variables to set into each container. -f, --file=[]: Path to a template file to use for the app. --grant-install-rights=false: If true, a component that requires access to your account may use your token to install software into your project. Only grant images you trust the right to run with your token. --group=[]: Indicate components that should be grouped together as \u0026lt;comp1\u0026gt;+\u0026lt;comp2\u0026gt;. --ignore-unknown-parameters=false: If true, will not stop processing if a provided parameter does not exist in the template. -i, --image-stream=[]: Name of an image stream to use in the app. --insecure-registry=false: If true, indicates that the referenced Docker images are on insecure registries and should bypass certificate checking -l, --labels=\u0026#39;\u0026#39;: Label to set in all resources for this application. -L, --list=false: List all local templates and image streams that can be used to create. --name=\u0026#39;\u0026#39;: Set name to use for generated application artifacts --no-install=false: Do not attempt to run images that describe themselves as being installable -o, --output=\u0026#39;\u0026#39;: Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file. --output-version=\u0026#39;\u0026#39;: The preferred API versions of the output objects -p, --param=[]: Specify a key-value pair (e.g., -p FOO=BAR) to set/override a parameter value in the template. --param-file=[]: File containing parameter values to set/override in the template. -S, --search=false: Search all templates, image streams, and Docker images that match the arguments provided. -a, --show-all=true: When printing, show all resources (false means hide terminated pods.) --show-labels=false: When printing, show all labels as the last column (default hide labels column) --show-managed-fields=false: If true, keep the managedFields when printing objects in JSON or YAML format. --sort-by=\u0026#39;\u0026#39;: If non-empty, sort list types using this field specification. The field specification is expressed as a JSONPath expression (e.g. \u0026#39;{.metadata.name}\u0026#39;). The field in the API resource specified by this JSONPath expression must be an integer or a string. --source-secret=\u0026#39;\u0026#39;: The name of an existing secret that should be used for cloning a private git repository. --strategy=: Specify the build strategy to use if you don\u0026#39;t want to detect (docker|pipeline|source). NOTICE: the pipeline strategy is deprecated; consider using Jenkinsfiles directly on Jenkins or OpenShift Pipelines. --template=[]: Name of a stored template to use in the app. Use \u0026#34;oc options\u0026#34; for a list of global command-line options (applies to all commands). 3. projects C:\\Users\\user\u0026gt;oc projects You have access to the following projects and can switch between them with \u0026#39; project \u0026lt;projectname\u0026gt;\u0026#39;: openshift openshift-apiserver openshift-apiserver-operator openshift-authentication openshift-authentication-operator openshift-cloud-controller-manager openshift-cloud-controller-manager-operator openshift-cloud-credential-operator openshift-cluster-csi-drivers openshift-cluster-machine-approver openshift-cluster-node-tuning-operator openshift-cluster-samples-operator openshift-cluster-storage-operator openshift-cluster-version openshift-config openshift-config-managed openshift-config-operator openshift-console openshift-console-operator openshift-console-user-settings openshift-controller-manager openshift-controller-manager-operator openshift-dns openshift-dns-operator openshift-etcd openshift-etcd-operator openshift-host-network openshift-image-registry openshift-infra openshift-ingress openshift-ingress-canary openshift-ingress-operator openshift-insights openshift-kni-infra openshift-kube-apiserver openshift-kube-apiserver-operator openshift-kube-controller-manager openshift-kube-controller-manager-operator openshift-kube-scheduler openshift-kube-scheduler-operator openshift-kube-storage-version-migrator openshift-kube-storage-version-migrator-operator openshift-kubevirt-infra openshift-machine-api openshift-machine-config-operator openshift-marketplace openshift-monitoring openshift-multus openshift-network-diagnostics openshift-network-operator openshift-node openshift-oauth-apiserver openshift-openstack-infra openshift-operator-lifecycle-manager openshift-operators openshift-ovirt-infra openshift-ovn-kubernetes openshift-service-ca openshift-service-ca-operator openshift-terminal openshift-user-workload-monitoring openshift-vsphere-infra podnaming-test quay Using project \u0026#34;okd-tutorial\u0026#34; on server \u0026#34;https://api.your-okd.com:6443\u0026#34;. 4. project C:\\Users\\user\u0026gt;oc project openshift-operators Now using project \u0026#34;openshift-operators\u0026#34; on server \u0026#34;https://api.your-okd.com:6443\u0026#34;. "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee2/",
	"title": "Apigee2 : 무료로 사용해보기",
	"tags": [],
	"description": "",
	"content": "1. Apigee 이동 2. 무료로 사용해 보기 선택  3. GCP project ID가 필요하다.  프로젝트는 모든 Google Cloud 리소스를 구성합니다. 프로젝트는 사용자 집합, API 집합, 그리고 이러한 API에 대한 청구, 인증, 모니터링 설정으로 구성됩니다. 예를 들어 모든 Cloud Storage 버킷과 객체는 이를 액세스할 수 있는 사용자 권한과 함께 프로젝트에 상주합니다. 프로젝트를 한 개만 갖거나 여러 프로젝트를 만들 수 있으며, 이를 사용하여 Cloud Storage 데이터를 포함한 Google Cloud 리소스를 논리적 그룹으로 구성할 수 있습니다.\n\r4. GCP 이동 상단의 팝업 메시지 \u0026ldquo;자세히 알아보기\u0026rdquo; 선택 $300 크레딧으로 무료 체험판을 시작해 보세요. 크레딧을 모두 사용해도 요금이 청구되지 않으니 걱정하지 마세요.\n\r무료로 시작하기  5. 무료로 시작하기 선택  6. 1단계 정보 입력  7. 2단계 정보 확인  8. 3단계 정보 확인  9. 3단계 정보 확인(결제 정보 확인)  10. 설문조사  11. 홈 -\u0026gt; 대시보드 선택  12. Project ID 확인 프로젝트 이름 My First Project 프로젝트 번호 432606567641 프로젝트 ID pure-fold-339305  13. Apigee 설정 화면 -\u0026gt; Project ID 입력후 START EVALUATION 선택  14. API 사용 설정(연필아이콘 선택)  15. Networking 설정후 ALLOCATE AND CONNECT 선택 Authorized network : default Reserve Peering Ranges : Automatically allocate IP range  16. Apigee evaluation organization 설정후 Provision 선택 Analytics hosting region : asia-east1 Runtime location : asia-east1 프로비저닝하는데 시간이 40~50분정도 걸린다.  17. Access routing 설정  Domain 입력을 해야 한다.    Domain이 없기 때문에 무료 도메인을 하나 생성한다.\n\r18. 무료도메인 신청  Duck DNS    19. 생성하고자 하는 도메인 이름을 서브 도메인에 입력한다.  20. ip 주소를 업데이트한다. 현재 External-ip를 모르니까.. 설정 완료후 출력되는 ip 주소를 입력한다. 21. Apigee 설정에서 발급받은 도메인을 등록한다.  22. 설정완료  23. External-IP를 Duck DNS에서 업데이트 한다. Configure DNS Create an A record that points spsenti2023.duckdns.org to 34.117.255.14 Test your Apigee runtime end to end Launch spsenti2023.duckdns.org to test the \u0026#39;Hello world\u0026#39; API.  24. Launch를 눌러 확인해본다. (배포까지 시간이 필요할 수도 있다.)  25. HTTPS 접속 문제가 발생할 경우 HTTP 프로토콜을 로드밸런서에 추가한다.   GCP Console로 이동한다.\n  네트워크 서비스 - 부하 분산 을 선택한다.    부하분산기를 선택한다.    수정을 선택한다.    프런트엔드 구성을 선택하여 IP 및 포트 추가를 선택한다.    HTTP/80 포트를 추가한다.    26. 로드밸런서 수정후 다시 접속해 확인한다. https://spsenti2023.duckdns.org/hello-world  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo2/",
	"title": "Hugo2 : 사이트 구축",
	"tags": [],
	"description": "",
	"content": "1. Hugo 설치  Hugo Quick-Start  1.1 hugo 설치(windows 기준 설명)  Hugo Download hugo release에서 최신버전을 다운로드 C:\\Hugo\\bin\\에 압축 해제 환경변수에 경로 추가  window + Q로 검색창을 연 뒤 환경 변수를 검색해서 환경 변수 선택 시스템변수의 Path를 더블클릭한다. 새로 만들기를 클릭한 다음 아까 압축을 풀었던 곳인 C:\\Hugo\\bin를 등록   command에서 hugo version을 쳐서 확인  windows\rMacOS\r\rC:\\Users\\user\u0026gt;hugo version hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio \r\rbrew install hugo # or port install hugo \r\r\r\r1.2 Hugo 프로젝트 만들기  hugo new site \u0026lt;프로젝트 이름\u0026gt;  $hugo new site bluewhale-hugo Congratulations! Your new Hugo site is created in D:\\Git\\bluewhale\\bluewhale-hugo. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation.  Directory 구조  C:\\bluewhale-hugo ├─archetypes ├─content ├─data ├─layouts ├─static └─themes 2. 테마 추가 2.1 Hugo theme 다운로드  hugo theme techdoc theme : MIT  windows\r\r$ cd bluewhale-hugo $ git submodule add https://github.com/thingsym/hugo-theme-techdoc.git themes/hugo-theme-techdoc $ git submodule update --remote $ git add themes/hugo-theme-techdoc \r\r\r\r2.2 미리보기 windows\r\rhugo server -D # -D draft 문서도 보여준다. \r\r\r\r$ hugo server -D port 1313 already in use, attempting to use an available port Start building sites … hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio | EN -------------------+----- Pages | 14 Paginator pages | 0 Non-page files | 0 Static files | 5 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Built in 64 ms Watching for changes in D:\\Git\\bluewhale\\bluewhale-hugo\\{archetypes,content,data,layouts,static,themes} Watching for config changes in D:\\Git\\bluewhale\\bluewhale-hugo\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:8868/ (bind address 127.0.0.1) Press Ctrl+C to stop 2.3 빌드 windows\r\r# hugo -t \u0026lt;테마이름\u0026gt; hugo server -t hugo-theme-techdoc # 출력위치 지정 # hugo -t hugo-theme-techdoc -d public_html \r\r\r\r$ hugo server -t hugo-theme-techdoc Start building sites … hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio | EN -------------------+----- Pages | 7 Paginator pages | 0 Non-page files | 0 Static files | 5 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Built in 87 ms Watching for changes in D:\\Git\\bluewhale\\bluewhale-hugo\\{archetypes,content,data,layouts,static,themes} Watching for config changes in D:\\Git\\bluewhale\\bluewhale-hugo\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop   public 폴더에 추가됨\n   http://localhost:1313 접속 화면    2.4 새 글 추가 $ hugo new post/test.md Content \u0026#34;D:\\\\Git\\\\bluewhale\\\\bluewhale-hugo\\\\content\\\\post\\\\test.md\u0026#34; created 3. 리파지터리 생성 2개의 리파지터리를 생성한다.\n 전체 컨텐츠를 저장할 곳 빌드 결과로 github page를 띄울 곳  첫번째 repository는 \u0026lt;프로젝트 이름\u0026gt; 두번째 repository는 #USER-ID.github.io로 만들면 된다.\n bluewhale-hugo bluewhale.github.io  3.1 git remote 설정 $ cd bluewhale-hugo $ git init $ git remote add origin https://github.com/bluewhale-users/bluewhale-hugo 3.2 github page 리파지터리 연결(bluewhale.github.io) $ git submodule add -b master https://github.com/bluewhale-users/bluewhale.github.io.git public $ git submodule add -b master https://github.com/bluewhale-users/bluewhale.github.io.git public Cloning into \u0026#39;D:/Git/bluewhale/bluewhale-hugo/public\u0026#39;... remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (4/4), done. warning: LF will be replaced by CRLF in .gitmodules. The file will have its original line endings in your working directory 3.3 commit/push $ git commit $ git push \rpull 실행시 아래와 같은 에러가 나온다면 히스토리를 리셋한다.\n\r\u0026gt; git pull --tags origin master From https://github.com/bluewhale-users/bluewhale-hugo * branch master -\u0026gt; FETCH_HEAD fatal: refusing to merge unrelated histories # git pull origin 브런치명 --allow-unrelated-histories git pull origin master --allow-unrelated-histories "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial2/",
	"title": "Tutorial2 : 리파지터리 생성",
	"tags": [],
	"description": "",
	"content": "GitHub Repository 준비 origin repository  src gitops  1. 2개 리파지터리를 본인 계정으로 fork   src fork repo gitops fork repo  2. Deploy Key 생성 및 등록 jenkins 빌드후 gitops 리파지터리에 commit을 수행하기 위해 deploy key를 등록합니다.\n2.1 Gitbash를 실행하여 ssh-keygen을 통해 deploy key를 생성 user@DESKTOP-1RAT70A MINGW64 ~/.ssh $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/user/.ssh/id_rsa): okd-tutorial-deploykey Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in okd-tutorial-deploykey. Your public key has been saved in okd-tutorial-deploykey.pub. The key fingerprint is: SHA256:AnFXcqY8jKZ9T3XTp12eh5cJd7ofMmRYMOml5gFZjao user@DESKTOP-1RAT70A The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . . o.*++ | | o = B ooo . | | . o = + +oo.=| | = o *o.oBB| | . o S +..o++=| | E o .o o.| | . o.. | | o..| | .| +----[SHA256]-----+ 3. GitOps Repo 이동  3.1 Settings -\u0026gt; Deploy keys로 이동해 Add deploy key 선택(Allow write access 체크)   4. Source Repo 이동 4.1 Jenkins 파일 편집 ...... stage(\u0026#34;Update Tag\u0026#34;) {  steps {  checkout([$class: \u0026#39;GitSCM\u0026#39;,  branches: [[name: \u0026#39;*/master\u0026#39; ]],  extensions: scm.extensions,  userRemoteConfigs: [[ - url: \u0026#39;fork한 repo url\u0026#39;, + url: \u0026#39;git@github.com:blackwhale-testuser/okd-tutorial1-gitops.git\u0026#39;,  credentialsId: \u0026#39;jenkins-ssh-private\u0026#39;,  ]]  ])  sshagent(credentials: [\u0026#39;jenkins-ssh-private\u0026#39;]){  sh(\u0026#34;\u0026#34;\u0026#34;  #!/usr/bin/env bash  set +x  export GIT_SSH_COMMAND=\u0026#34;ssh -oStrictHostKeyChecking=no\u0026#34;  git config --global user.email \u0026#34;test@gmail.com\u0026#34;  git checkout master  cp --f base/deployment-sample.yaml okd-deploy/temp.yaml  cd okd-deploy  sed -i \u0026#39;s/MY_BUILD_TAG/test.4/\u0026#39; temp.yaml  cat temp.yaml  cp --f temp.yaml testblog-deployment.yaml  git commit -a -m \u0026#34;updated the image tag\u0026#34;  git push  \u0026#34;\u0026#34;\u0026#34;)  }  } } ...... "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/web-console/tutorial3/",
	"title": "Tutorial3 : 프로젝트 삭제",
	"tags": [],
	"description": "",
	"content": "1. 프로젝트 삭제   삭제할 Application을 선택한다.    마우스 우클릭을 하여 \u0026lsquo;Delete Application\u0026rsquo;을 선택한다.    확인용 app 이름을 타이핑해 넣는다.\n(연결된 모든 Deployments, Routes, Builds, Pipelines, Storage/PCVs, Secret 및 ConfigMap 이 삭제됩니다.)    삭제 완료    이 단계를 거치지 않고 리소스를 부분적으로 삭제하게 되면 남아 있는 리소스들을 수동으로 삭제해야 한다.\n\r"
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee3/",
	"title": "Apigee3 : API Reverse Proxy",
	"tags": [],
	"description": "",
	"content": "1. Create New 선택  2. Reverse proxy 선택  3. Proxy 설정 추가 Name : okd Target : http://dotnetexample-okd-tutorial.apps.blackwhale.cloud.hancom.com/WeatherForecast  4. Add CORS Headers 체크  5. Optional Deployment - eval 체크 안함  6. Create 완료 - Edit proxy 선택  7. Revision을 1번을 Deploy 한다.  8. 서비스 어카운트 설정은 기본값으로 Deploy  9. URL에 접속해 프록시가 동작하는지 확인한다.  https://spsenti2023.duckdns.org/okd   10. 새버전 추가    좌측의 Revision Dropdown 메뉴를 선택해 Save as new revision을 선택한다.\n     새로운 Revision이 생성된다. (수정후 저장)\n    Overview 탭으로 이동후 새로운 Revision을 선택후 Deploy한다.    "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo3/",
	"title": "Hugo3 : 테마 수정 및 변경",
	"tags": [],
	"description": "",
	"content": "1. Theme Overriding 테마 수정시 \u0026rsquo;themes\u0026rsquo; 디렉토리의 내용은 수정하지 않는다. 테마구조를 살펴보면 원본 프로젝트 구조와 유사한 것을 확인할 수 있다. (archetypes, layouts, static, \u0026hellip;), 즉 테마도 hugo 프로젝트이다.\n테마 프로젝트의 layouts 파일들을 원본 프로젝트 layouts 폴더에 복사하여 이를 수정함으로써 테마를 오버라이딩하여 사용할 수 있다.\n \\layouts\\partials\\header.html이 존재하면 \\layouts\\partials\\header.html을 적용한다. 존재하지 않으면 \\themes\u0026lt;테마 이름\u0026gt;\\layouts\\partials\\header.html을 적용한다  2. 아래 링크를 참고하여 테마를 수정해 보자.  hugo-theme-techdoc exampleSite  config.toml\r\rbaseURL = \u0026#39;https://bluewhale-users.github.io/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;Bluewhale Tutorial Site\u0026#39; theme = \u0026#34;hugo-theme-techdoc\u0026#34;  hasCJKLanguage = true metaDataFormat = \u0026#34;yaml\u0026#34;  defaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir= false enableMissingTranslationPlaceholders = false  [params]   # Source Code repository section  description = \u0026#34;put your description\u0026#34;  github_repository = \u0026#34;https://github.com/thingsym/hugo-theme-techdoc\u0026#34;  version = \u0026#34;0.9.7\u0026#34;   # Documentation repository section  # documentation repository (set edit link to documentation repository)  github_doc_repository = \u0026#34;https://github.com/thingsym/hugo-theme-techdoc\u0026#34;  github_doc_repository_path = \u0026#34;\u0026#34;   # Analytic section  google_analytics_id = \u0026#34;\u0026#34; # Your Google Analytics tracking id  tag_manager_container_id = \u0026#34;\u0026#34; # Your Google Tag Manager container id  google_site_verification = \u0026#34;\u0026#34; # Your Google Site Verification for Search Console   # Open Graph and Twitter Cards settings section  # Open Graph settings for each page are set on the front matter.  # See https://gohugo.io/templates/internal/#open-graph  # See https://gohugo.io/templates/internal/#twitter-cards  title = \u0026#34;Hugo Techdoc Theme\u0026#34;  images = [\u0026#34;images/og-image.png\u0026#34;] # Open graph images are placed in `static/images`   # Theme settings section  # Theme color  # See color value reference https://developer.mozilla.org/en-US/docs/Web/CSS/color  custom_font_color = \u0026#34;\u0026#34;  custom_background_color = \u0026#34;\u0026#34;   # Documentation Menu section  # Menu style settings  menu_style = \u0026#34;slide-menu\u0026#34; # \u0026#34;open-menu\u0026#34; or \u0026#34;slide-menu\u0026#34; or \u0026#34;\u0026#34; blank is as no sidebar   # Date format  dateformat = \u0026#34;\u0026#34; # default \u0026#34;2 Jan 2006\u0026#34;  # See the format reference https://gohugo.io/functions/format/#hugo-date-and-time-templating-reference   # path name excluded from documentation menu  menu_exclusion = [  \u0026#34;archives\u0026#34;,  \u0026#34;archive\u0026#34;,  \u0026#34;blog\u0026#34;,  \u0026#34;entry\u0026#34;,  \u0026#34;post\u0026#34;,  \u0026#34;posts\u0026#34;,  ]   # Algolia site search section  # See https://www.algolia.com/doc/  algolia_search_enable = true  algolia_indexName = \u0026#34;hugo-demo-techdoc\u0026#34;  algolia_appId = \u0026#34;7W4SAN4PLK\u0026#34;  algolia_apiKey = \u0026#34;cbf12a63ff72d9c5dc0c10c195cf9128\u0026#34; # Search-Only API Key  # Global menu section # See https://gohugo.io/content-management/menus/ [menu]  [[menu.main]]  name = \u0026#34;Home\u0026#34;  url = \u0026#34;/\u0026#34;  weight = 1   [[menu.main]]  name = \u0026#34;Blackwhale(OKD)\u0026#34;  url = \u0026#34;https://console-openshift-console.apps.blackwhale.cloud.hancom.com/\u0026#34;  weight = 2  # Markup configure section # See https://gohugo.io/getting-started/configuration-markup/ [markup]  defaultMarkdownHandler = \u0026#34;goldmark\u0026#34;  [markup.goldmark.renderer]  unsafe= true  [markup.tableOfContents]  startLevel = 2  endLevel = 6  ordered = false  [outputs]  home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;Algolia\u0026#34;]  # Algolia Search configure section [outputFormats.Algolia]  baseName = \u0026#34;algolia\u0026#34;  mediaType = \u0026#34;application/json\u0026#34;  isPlainText = true  notAlternative = true  [params.algolia]  vars = [  \u0026#34;title\u0026#34;,  \u0026#34;summary\u0026#34;,  \u0026#34;content\u0026#34;,  \u0026#34;date\u0026#34;,  \u0026#34;publishdate\u0026#34;,  \u0026#34;description\u0026#34;,  \u0026#34;permalink\u0026#34;,  \u0026#34;keywords\u0026#34;,  \u0026#34;lastmod\u0026#34;,  ]  params = [  \u0026#34;tags\u0026#34;,  \u0026#34;categories\u0026#34;,  ] \r\r\r\r3. exmaplesite 확인  theme에 포함된 샘플사이트를 확인할수 있다.  $ cd themes\\hugo-theme-techdoc\\exampleSite $ hugo server --themesDir ../.. port 1313 already in use, attempting to use an available port Start building sites … hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio WARN 2022/03/14 11:51:59 The \u0026#34;tweet\u0026#34; shortcode will soon require two named parameters: user and id. See \u0026#34;D:\\Git\\bluewhale\\bluewhale-hugo\\themes\\hugo-theme-techdoc\\exampleSite\\content\\sample\\build-in-shortcodes.md:35:1\u0026#34; | EN -------------------+------ Pages | 100 Paginator pages | 0 Non-page files | 0 Static files | 7 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Built in 683 ms Watching for changes in D:\\Git\\bluewhale\\bluewhale-hugo\\themes\\hugo-theme-techdoc\\{archetypes,exampleSite,layouts,package.json,static} Watching for config changes in D:\\Git\\bluewhale\\bluewhale-hugo\\themes\\hugo-theme-techdoc\\exampleSite\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:2627/ (bind address 127.0.0.1) Press Ctrl+C to stop 테마 변경  learn theme learn 테마 참고1 learn 테마 참고2 learn 테마 folk repo  1. 기존 테마 제거 // 모듈 제거 순서 $ git submodule deinit -f themes/hugo-theme-techdoc $ rm -rf .git/modules/themes/hugo-theme-techdoc $ git rm -f themes/hugo-theme-techdoc $ git submodule deinit -f themes/hugo-theme-techdoc Cleared directory \u0026#39;themes/hugo-theme-techdoc\u0026#39; Submodule \u0026#39;themes/hugo-theme-techdoc\u0026#39; (https://github.com/thingsym/hugo-theme-techdoc.git) unregistered for path \u0026#39;themes/hugo-theme-techdoc\u0026#39; user@DESKTOP-1RAT70A MINGW64 /d/Git/bluewhale/bluewhale-hugo (master) $ rm -rf .git/modules/themes/hugo-theme-techdoc user@DESKTOP-1RAT70A MINGW64 /d/Git/bluewhale/bluewhale-hugo (master) $ git rm -f themes/hugo-theme-techdoc warning: LF will be replaced by CRLF in .gitmodules. The file will have its original line endings in your working directory rm \u0026#39;themes/hugo-theme-techdoc\u0026#39; 2. 새로운 테마 설치 $ cd themes/ $ git clone https://github.com/matcornic/hugo-theme-learn.git  테마 exampleSite 확인  $ cd themes\\hugo-theme-learn\\exampleSite $ hugo server --themesDir ../.. 3. 빌드 $ hugo -t hugo-theme-learn 4. submodule 추가시 오류 PS D:\\Git\\bluewhale\\bluewhale-hugo\u0026gt; git submodule add -b master https://github.com/bluewhale-users/bluewhale.github.io.git public --force A git directory for \u0026#39;public\u0026#39; is found locally with remote(s): origin https://github.com/bluewhale-users/bluewhale.github.io.git If you want to reuse this local git directory instead of cloning again from https://github.com/bluewhale-users/bluewhale.github.io.git use the \u0026#39;--force\u0026#39; option. If the local git directory is not the correct repo or you are unsure what this means choose another name with the \u0026#39;--name\u0026#39; option. \r.git/modules/ 폴더 삭제후 다시 시도\n\r5. front matter  Front Matter Formats  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial3/",
	"title": "Tutorial3 : DockerHub 설정",
	"tags": [],
	"description": "",
	"content": "DockerHub 설정 1. docker hub에 계정 생성  dockerhub link   2. 리파지터리를 생성 name : okdtutorial visibility : public   [생성화면]   "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/web-console/tutorial4/",
	"title": "Tutorial4 : Add From Git",
	"tags": [],
	"description": "",
	"content": "Sample Github\n1. 프로젝트에 추가  우클릭하여 \u0026lsquo;Add to Project -\u0026gt; From Git\u0026rsquo; 선택    Sample Git Repo\nhttps://github.com/bluewhale-users/okd-tutorial2-src  Git Repo URL에 Sample URL을 입력한다.    URL 입력후 하단에 \u0026lsquo;Validated\u0026rsquo; 메시지가 보인다면 연결이 가능한 상태이다.\n소스 리파티터리 분석후 빌드 이미지를 자동 검출한다. (샘플의 경우 Node.js)\n\r 아래로 스크롤해 Application name과 Name을 입력한다.  Builder Image version : 14-ubi7 Application name : okd-tutorial-2-src-app Name : okd-tutorial-2-src Resources : Deployment Create a route to the Applicaiton : Checked   Advanced options의 \u0026ldquo;Show advanced Routing options\u0026quot;을 확장해 Target port를 \u0026ldquo;3000\u0026quot;으로 변경한다.    Create 버튼을 누른다. (다른 옵션은 기본값 사용)\n  Build가 끝날때까지 기다린다.    Build 성공(Open URL을 눌러 접속 확인)    접속 화면    2. 생성 리소스 확인   Administrator 관점으로 변경한다.    Workloads 이동    Pods에 보면 2개의 Pod가 보인다.\nokd-tutorial-2-src-1-build : buildconfig에 의해 생성된 build pod\nokd-tutorial-2-src-849568bdbd-hcm5r : application 동작 pod\nStatus를 보면 Completed / Running상태로 build pod의 경우 종료된것을 확인할 수 있다.\n\r  Deployments    Deployment yaml\n  kind: Deployment apiVersion: apps/v1 metadata: annotations: alpha.image.policy.openshift.io/resolve-names: \u0026#39;*\u0026#39; app.openshift.io/vcs-ref: \u0026#39;\u0026#39; app.openshift.io/vcs-uri: \u0026#39;https://github.com/bluewhale-users/okd-tutorial2-src\u0026#39; deployment.kubernetes.io/revision: \u0026#39;2\u0026#39; image.openshift.io/triggers: \u0026gt;- [{\u0026#34;from\u0026#34;:{\u0026#34;kind\u0026#34;:\u0026#34;ImageStreamTag\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;okd-tutorial-2-src:latest\u0026#34;,\u0026#34;namespace\u0026#34;:\u0026#34;okd-tutorials\u0026#34;},\u0026#34;fieldPath\u0026#34;:\u0026#34;spec.template.spec.containers[?(@.name==\\\u0026#34;okd-tutorial-2-src\\\u0026#34;)].image\u0026#34;,\u0026#34;pause\u0026#34;:\u0026#34;false\u0026#34;}] openshift.io/generated-by: OpenShiftWebConsole resourceVersion: \u0026#39;325511288\u0026#39; name: okd-tutorial-2-src uid: 45cf7dcf-a426-4f55-ae1e-fe4db8b1b993 creationTimestamp: \u0026#39;2022-04-11T06:42:35Z\u0026#39; generation: 2 managedFields: - manager: Mozilla operation: Update apiVersion: apps/v1 time: \u0026#39;2022-04-11T06:42:35Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:metadata\u0026#39;: \u0026#39;f:annotations\u0026#39;: .: {} \u0026#39;f:alpha.image.policy.openshift.io/resolve-names\u0026#39;: {} \u0026#39;f:app.openshift.io/vcs-ref\u0026#39;: {} \u0026#39;f:app.openshift.io/vcs-uri\u0026#39;: {} \u0026#39;f:image.openshift.io/triggers\u0026#39;: {} \u0026#39;f:openshift.io/generated-by\u0026#39;: {} \u0026#39;f:labels\u0026#39;: .: {} \u0026#39;f:app\u0026#39;: {} \u0026#39;f:app.kubernetes.io/component\u0026#39;: {} \u0026#39;f:app.kubernetes.io/instance\u0026#39;: {} \u0026#39;f:app.kubernetes.io/name\u0026#39;: {} \u0026#39;f:app.kubernetes.io/part-of\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime-version\u0026#39;: {} \u0026#39;f:spec\u0026#39;: \u0026#39;f:progressDeadlineSeconds\u0026#39;: {} \u0026#39;f:replicas\u0026#39;: {} \u0026#39;f:revisionHistoryLimit\u0026#39;: {} \u0026#39;f:selector\u0026#39;: {} \u0026#39;f:strategy\u0026#39;: \u0026#39;f:rollingUpdate\u0026#39;: .: {} \u0026#39;f:maxSurge\u0026#39;: {} \u0026#39;f:maxUnavailable\u0026#39;: {} \u0026#39;f:type\u0026#39;: {} \u0026#39;f:template\u0026#39;: \u0026#39;f:metadata\u0026#39;: \u0026#39;f:labels\u0026#39;: .: {} \u0026#39;f:app\u0026#39;: {} \u0026#39;f:deploymentconfig\u0026#39;: {} \u0026#39;f:spec\u0026#39;: \u0026#39;f:containers\u0026#39;: \u0026#39;k:{\u0026#34;name\u0026#34;:\u0026#34;okd-tutorial-2-src\u0026#34;}\u0026#39;: .: {} \u0026#39;f:imagePullPolicy\u0026#39;: {} \u0026#39;f:name\u0026#39;: {} \u0026#39;f:ports\u0026#39;: .: {} \u0026#39;k:{\u0026#34;containerPort\u0026#34;:8080,\u0026#34;protocol\u0026#34;:\u0026#34;TCP\u0026#34;}\u0026#39;: .: {} \u0026#39;f:containerPort\u0026#39;: {} \u0026#39;f:protocol\u0026#39;: {} \u0026#39;f:resources\u0026#39;: {} \u0026#39;f:terminationMessagePath\u0026#39;: {} \u0026#39;f:terminationMessagePolicy\u0026#39;: {} \u0026#39;f:dnsPolicy\u0026#39;: {} \u0026#39;f:restartPolicy\u0026#39;: {} \u0026#39;f:schedulerName\u0026#39;: {} \u0026#39;f:securityContext\u0026#39;: {} \u0026#39;f:terminationGracePeriodSeconds\u0026#39;: {} - manager: openshift-controller-manager operation: Update apiVersion: apps/v1 time: \u0026#39;2022-04-11T06:52:11Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:spec\u0026#39;: \u0026#39;f:template\u0026#39;: \u0026#39;f:spec\u0026#39;: \u0026#39;f:containers\u0026#39;: \u0026#39;k:{\u0026#34;name\u0026#34;:\u0026#34;okd-tutorial-2-src\u0026#34;}\u0026#39;: \u0026#39;f:image\u0026#39;: {} - manager: kube-controller-manager operation: Update apiVersion: apps/v1 time: \u0026#39;2022-04-11T13:03:09Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:metadata\u0026#39;: \u0026#39;f:annotations\u0026#39;: \u0026#39;f:deployment.kubernetes.io/revision\u0026#39;: {} \u0026#39;f:status\u0026#39;: \u0026#39;f:availableReplicas\u0026#39;: {} \u0026#39;f:conditions\u0026#39;: .: {} \u0026#39;k:{\u0026#34;type\u0026#34;:\u0026#34;Available\u0026#34;}\u0026#39;: .: {} \u0026#39;f:lastTransitionTime\u0026#39;: {} \u0026#39;f:lastUpdateTime\u0026#39;: {} \u0026#39;f:message\u0026#39;: {} \u0026#39;f:reason\u0026#39;: {} \u0026#39;f:status\u0026#39;: {} \u0026#39;f:type\u0026#39;: {} \u0026#39;k:{\u0026#34;type\u0026#34;:\u0026#34;Progressing\u0026#34;}\u0026#39;: .: {} \u0026#39;f:lastTransitionTime\u0026#39;: {} \u0026#39;f:lastUpdateTime\u0026#39;: {} \u0026#39;f:message\u0026#39;: {} \u0026#39;f:reason\u0026#39;: {} \u0026#39;f:status\u0026#39;: {} \u0026#39;f:type\u0026#39;: {} \u0026#39;f:observedGeneration\u0026#39;: {} \u0026#39;f:readyReplicas\u0026#39;: {} \u0026#39;f:replicas\u0026#39;: {} \u0026#39;f:updatedReplicas\u0026#39;: {} namespace: okd-tutorials labels: app: okd-tutorial-2-src app.kubernetes.io/component: okd-tutorial-2-src app.kubernetes.io/instance: okd-tutorial-2-src app.kubernetes.io/name: okd-tutorial-2-src app.kubernetes.io/part-of: okd-tutorial-2-src-app app.openshift.io/runtime: nodejs app.openshift.io/runtime-version: 14-ubi7 spec: replicas: 1 selector: matchLabels: app: okd-tutorial-2-src template: metadata: creationTimestamp: null labels: app: okd-tutorial-2-src deploymentconfig: okd-tutorial-2-src spec: containers: - name: okd-tutorial-2-src image: \u0026gt;- image-registry.openshift-image-registry.svc:5000/okd-tutorials/okd-tutorial-2-src@sha256:48c85bcc4823432914e234aaac9b1d01c2265e430d46dae933079a66de26609f ports: - containerPort: 8080 protocol: TCP resources: {} terminationMessagePath: /dev/termination-log terminationMessagePolicy: File imagePullPolicy: Always restartPolicy: Always terminationGracePeriodSeconds: 30 dnsPolicy: ClusterFirst securityContext: {} schedulerName: default-scheduler strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 25% maxSurge: 25% revisionHistoryLimit: 10 progressDeadlineSeconds: 600 status: observedGeneration: 2 replicas: 1 updatedReplicas: 1 readyReplicas: 1 availableReplicas: 1 conditions: - type: Progressing status: \u0026#39;True\u0026#39; lastUpdateTime: \u0026#39;2022-04-11T06:52:17Z\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T06:42:35Z\u0026#39; reason: NewReplicaSetAvailable message: ReplicaSet \u0026#34;okd-tutorial-2-src-849568bdbd\u0026#34; has successfully progressed. - type: Available status: \u0026#39;True\u0026#39; lastUpdateTime: \u0026#39;2022-04-11T13:03:09Z\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T13:03:09Z\u0026#39; reason: MinimumReplicasAvailable message: Deployment has minimum availability. \rDeployment 명세서이다.\n\r  Networking -\u0026gt; Services    Service yaml\n  kind: Service apiVersion: v1 metadata: name: okd-tutorial-2-src namespace: okd-tutorials uid: 975ce49c-7baf-479b-a0a7-4f1ea181fe77 resourceVersion: \u0026#39;324921394\u0026#39; creationTimestamp: \u0026#39;2022-04-11T06:42:35Z\u0026#39; labels: app: okd-tutorial-2-src app.kubernetes.io/component: okd-tutorial-2-src app.kubernetes.io/instance: okd-tutorial-2-src app.kubernetes.io/name: okd-tutorial-2-src app.kubernetes.io/part-of: okd-tutorial-2-src-app app.openshift.io/runtime: nodejs app.openshift.io/runtime-version: 14-ubi7 annotations: app.openshift.io/vcs-ref: \u0026#39;\u0026#39; app.openshift.io/vcs-uri: \u0026#39;https://github.com/bluewhale-users/okd-tutorial2-src\u0026#39; openshift.io/generated-by: OpenShiftWebConsole managedFields: - manager: Mozilla operation: Update apiVersion: v1 time: \u0026#39;2022-04-11T06:42:35Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:metadata\u0026#39;: \u0026#39;f:annotations\u0026#39;: .: {} \u0026#39;f:app.openshift.io/vcs-ref\u0026#39;: {} \u0026#39;f:app.openshift.io/vcs-uri\u0026#39;: {} \u0026#39;f:openshift.io/generated-by\u0026#39;: {} \u0026#39;f:labels\u0026#39;: .: {} \u0026#39;f:app\u0026#39;: {} \u0026#39;f:app.kubernetes.io/component\u0026#39;: {} \u0026#39;f:app.kubernetes.io/instance\u0026#39;: {} \u0026#39;f:app.kubernetes.io/name\u0026#39;: {} \u0026#39;f:app.kubernetes.io/part-of\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime-version\u0026#39;: {} \u0026#39;f:spec\u0026#39;: \u0026#39;f:ports\u0026#39;: .: {} \u0026#39;k:{\u0026#34;port\u0026#34;:3000,\u0026#34;protocol\u0026#34;:\u0026#34;TCP\u0026#34;}\u0026#39;: .: {} \u0026#39;f:name\u0026#39;: {} \u0026#39;f:port\u0026#39;: {} \u0026#39;f:protocol\u0026#39;: {} \u0026#39;f:targetPort\u0026#39;: {} \u0026#39;k:{\u0026#34;port\u0026#34;:8080,\u0026#34;protocol\u0026#34;:\u0026#34;TCP\u0026#34;}\u0026#39;: .: {} \u0026#39;f:name\u0026#39;: {} \u0026#39;f:port\u0026#39;: {} \u0026#39;f:protocol\u0026#39;: {} \u0026#39;f:targetPort\u0026#39;: {} \u0026#39;f:selector\u0026#39;: .: {} \u0026#39;f:app\u0026#39;: {} \u0026#39;f:deploymentconfig\u0026#39;: {} \u0026#39;f:sessionAffinity\u0026#39;: {} \u0026#39;f:type\u0026#39;: {} spec: ports: - name: 8080-tcp protocol: TCP port: 8080 targetPort: 8080 - name: 3000-tcp protocol: TCP port: 3000 targetPort: 3000 selector: app: okd-tutorial-2-src deploymentconfig: okd-tutorial-2-src clusterIP: 172.30.80.194 clusterIPs: - 172.30.80.194 type: ClusterIP sessionAffinity: None ipFamilies: - IPv4 ipFamilyPolicy: SingleStack status: loadBalancer: {} \rService 명세서이다. spec 필드를 확인하면 8080-tcp와 추가한 3000-tcp를 확인할 수 있다.\n\r  Networking -\u0026gt; Routes    Route yaml\n  kind: Route apiVersion: route.openshift.io/v1 metadata: name: okd-tutorial-2-src namespace: okd-tutorials uid: b5934f14-6234-4770-9208-93c7ca556ce9 resourceVersion: \u0026#39;324921407\u0026#39; creationTimestamp: \u0026#39;2022-04-11T06:42:36Z\u0026#39; labels: app: okd-tutorial-2-src app.kubernetes.io/component: okd-tutorial-2-src app.kubernetes.io/instance: okd-tutorial-2-src app.kubernetes.io/name: okd-tutorial-2-src app.kubernetes.io/part-of: okd-tutorial-2-src-app app.openshift.io/runtime: nodejs app.openshift.io/runtime-version: 14-ubi7 annotations: openshift.io/host.generated: \u0026#39;true\u0026#39; managedFields: - manager: Mozilla operation: Update apiVersion: route.openshift.io/v1 time: \u0026#39;2022-04-11T06:42:36Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:metadata\u0026#39;: \u0026#39;f:labels\u0026#39;: .: {} \u0026#39;f:app\u0026#39;: {} \u0026#39;f:app.kubernetes.io/component\u0026#39;: {} \u0026#39;f:app.kubernetes.io/instance\u0026#39;: {} \u0026#39;f:app.kubernetes.io/name\u0026#39;: {} \u0026#39;f:app.kubernetes.io/part-of\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime-version\u0026#39;: {} \u0026#39;f:spec\u0026#39;: \u0026#39;f:port\u0026#39;: .: {} \u0026#39;f:targetPort\u0026#39;: {} \u0026#39;f:to\u0026#39;: \u0026#39;f:kind\u0026#39;: {} \u0026#39;f:name\u0026#39;: {} \u0026#39;f:weight\u0026#39;: {} \u0026#39;f:wildcardPolicy\u0026#39;: {} - manager: openshift-router operation: Update apiVersion: route.openshift.io/v1 time: \u0026#39;2022-04-11T06:42:36Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:status\u0026#39;: \u0026#39;f:ingress\u0026#39;: {} spec: host: okd-tutorial-2-src-okd-tutorials.apps.blackwhale.cloud.hancom.com to: kind: Service name: okd-tutorial-2-src weight: 100 port: targetPort: 3000-tcp wildcardPolicy: None status: ingress: - host: okd-tutorial-2-src-okd-tutorials.apps.blackwhale.cloud.hancom.com routerName: default conditions: - type: Admitted status: \u0026#39;True\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T06:42:36Z\u0026#39; wildcardPolicy: None routerCanonicalHostname: router-default.apps.blackwhale.cloud.hancom.com \rroute 명세서이다. spec 필드를 확인하면 targetPort가 3000-tcp로 맵핑된것을 확인할 수 있다.\n\r  Builds -\u0026gt; BuildConfigs    Build yaml\n  kind: Build apiVersion: build.openshift.io/v1 metadata: annotations: openshift.io/build-config.name: okd-tutorial-2-src openshift.io/build.number: \u0026#39;1\u0026#39; openshift.io/build.pod-name: okd-tutorial-2-src-1-build resourceVersion: \u0026#39;324932856\u0026#39; name: okd-tutorial-2-src-1 uid: fadbbbcb-ff4e-48e4-8f1e-8c9b92da06e3 creationTimestamp: \u0026#39;2022-04-11T06:42:35Z\u0026#39; generation: 2 namespace: okd-tutorials ownerReferences: - apiVersion: build.openshift.io/v1 kind: BuildConfig name: okd-tutorial-2-src uid: 9c674a5b-1542-45f3-bf46-07706afec6cf controller: true labels: app: okd-tutorial-2-src app.kubernetes.io/part-of: okd-tutorial-2-src-app app.kubernetes.io/instance: okd-tutorial-2-src openshift.io/build-config.name: okd-tutorial-2-src app.kubernetes.io/component: okd-tutorial-2-src openshift.io/build.start-policy: Serial buildconfig: okd-tutorial-2-src app.openshift.io/runtime: nodejs app.kubernetes.io/name: okd-tutorial-2-src app.openshift.io/runtime-version: 14-ubi7 spec: nodeSelector: null output: to: kind: ImageStreamTag name: \u0026#39;okd-tutorial-2-src:latest\u0026#39; pushSecret: name: builder-dockercfg-2h2dq resources: {} triggeredBy: - message: Build configuration change strategy: type: Source sourceStrategy: from: kind: DockerImage name: \u0026gt;- image-registry.openshift-image-registry.svc:5000/openshift/nodejs@sha256:a49baf4d9de05b879d319356aa9349f4ad9962fd5859f2e7029e2da1559a8d2d pullSecret: name: builder-dockercfg-2h2dq postCommit: {} serviceAccount: builder source: type: Git git: uri: \u0026#39;https://github.com/bluewhale-users/okd-tutorial2-src\u0026#39; contextDir: / revision: type: Git git: commit: 22b290ce3dbbffd67275a9a9e20f1eb1b1cf1c80 author: name: testuser email: testuser@gmail.com committer: name: testuser email: testuser@gmail.com message: commit status: output: to: imageDigest: \u0026#39;sha256:48c85bcc4823432914e234aaac9b1d01c2265e430d46dae933079a66de26609f\u0026#39; config: kind: BuildConfig namespace: okd-tutorials name: okd-tutorial-2-src outputDockerImageReference: \u0026gt;- image-registry.openshift-image-registry.svc:5000/okd-tutorials/okd-tutorial-2-src:latest duration: 576000000000 startTimestamp: \u0026#39;2022-04-11T06:42:36Z\u0026#39; stages: - name: FetchInputs startTime: \u0026#39;2022-04-11T06:42:43Z\u0026#39; durationMilliseconds: 1929 steps: - name: FetchGitSource startTime: \u0026#39;2022-04-11T06:42:43Z\u0026#39; durationMilliseconds: 1929 - name: PullImages startTime: \u0026#39;2022-04-11T06:42:52Z\u0026#39; durationMilliseconds: 335713 steps: - name: PullBaseImage startTime: \u0026#39;2022-04-11T06:42:52Z\u0026#39; durationMilliseconds: 335713 - name: Build startTime: \u0026#39;2022-04-11T06:48:28Z\u0026#39; durationMilliseconds: 217903 steps: - name: DockerBuild startTime: \u0026#39;2022-04-11T06:48:28Z\u0026#39; durationMilliseconds: 217903 - name: PushImage startTime: \u0026#39;2022-04-11T06:52:06Z\u0026#39; durationMilliseconds: 5070 steps: - name: PushImage startTime: \u0026#39;2022-04-11T06:52:06Z\u0026#39; durationMilliseconds: 5070 conditions: - type: New status: \u0026#39;False\u0026#39; lastUpdateTime: \u0026#39;2022-04-11T06:42:36Z\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T06:42:36Z\u0026#39; - type: Pending status: \u0026#39;False\u0026#39; lastUpdateTime: \u0026#39;2022-04-11T06:42:41Z\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T06:42:41Z\u0026#39; - type: Running status: \u0026#39;False\u0026#39; lastUpdateTime: \u0026#39;2022-04-11T06:52:12Z\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T06:52:12Z\u0026#39; - type: Complete status: \u0026#39;True\u0026#39; lastUpdateTime: \u0026#39;2022-04-11T06:52:12Z\u0026#39; lastTransitionTime: \u0026#39;2022-04-11T06:52:12Z\u0026#39; completionTimestamp: \u0026#39;2022-04-11T06:52:12Z\u0026#39; phase: Complete \rBuild 명세서이다. s2i 빌드를 위해 사용한다.\n\r  Builds -\u0026gt; ImageStreams    ImageSteram yaml\n  kind: ImageStream apiVersion: image.openshift.io/v1 metadata: annotations: app.openshift.io/vcs-ref: \u0026#39;\u0026#39; app.openshift.io/vcs-uri: \u0026#39;https://github.com/bluewhale-users/okd-tutorial2-src\u0026#39; openshift.io/generated-by: OpenShiftWebConsole resourceVersion: \u0026#39;324932812\u0026#39; name: okd-tutorial-2-src uid: c4459beb-4714-4086-ba5f-a787af58f12e creationTimestamp: \u0026#39;2022-04-11T06:42:35Z\u0026#39; generation: 1 managedFields: - manager: Mozilla operation: Update apiVersion: image.openshift.io/v1 time: \u0026#39;2022-04-11T06:42:35Z\u0026#39; fieldsType: FieldsV1 fieldsV1: \u0026#39;f:metadata\u0026#39;: \u0026#39;f:annotations\u0026#39;: .: {} \u0026#39;f:app.openshift.io/vcs-ref\u0026#39;: {} \u0026#39;f:app.openshift.io/vcs-uri\u0026#39;: {} \u0026#39;f:openshift.io/generated-by\u0026#39;: {} \u0026#39;f:labels\u0026#39;: .: {} \u0026#39;f:app\u0026#39;: {} \u0026#39;f:app.kubernetes.io/component\u0026#39;: {} \u0026#39;f:app.kubernetes.io/instance\u0026#39;: {} \u0026#39;f:app.kubernetes.io/name\u0026#39;: {} \u0026#39;f:app.kubernetes.io/part-of\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime\u0026#39;: {} \u0026#39;f:app.openshift.io/runtime-version\u0026#39;: {} namespace: okd-tutorials labels: app: okd-tutorial-2-src app.kubernetes.io/component: okd-tutorial-2-src app.kubernetes.io/instance: okd-tutorial-2-src app.kubernetes.io/name: okd-tutorial-2-src app.kubernetes.io/part-of: okd-tutorial-2-src-app app.openshift.io/runtime: nodejs app.openshift.io/runtime-version: 14-ubi7 spec: lookupPolicy: local: false status: dockerImageRepository: \u0026gt;- image-registry.openshift-image-registry.svc:5000/okd-tutorials/okd-tutorial-2-src tags: - tag: latest items: - created: \u0026#39;2022-04-11T06:52:11Z\u0026#39; dockerImageReference: \u0026gt;- image-registry.openshift-image-registry.svc:5000/okd-tutorials/okd-tutorial-2-src@sha256:48c85bcc4823432914e234aaac9b1d01c2265e430d46dae933079a66de26609f image: \u0026gt;- sha256:48c85bcc4823432914e234aaac9b1d01c2265e430d46dae933079a66de26609f generation: 1 \rImageStream 명세서이다. 빌드 결과로 생성된 이미지와 관련된 정보를 알 수 있다.\n\r"
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee4/",
	"title": "Apigee4 : 개발자 포털1",
	"tags": [],
	"description": "",
	"content": "1. Apigee -\u0026gt; Publish -\u0026gt; Portals -\u0026gt; Get Started 선택  2. 이름 입력  3. 관리 화면  우측 상단의 Live Potal을 선택한다.    4. 개발자포털 화면  https://pure-fold-339305-developers.apigee.io/    5. 계정 생성   우측상단의 Sign In을 눌러 계정을 만든다.    인증메일을 발송한다.    6. 전송된 링크로 접속 확인   7. My App 만들기  계정을 눌러 Apps를 선택한다.    8. NEW APP을 선택한다.  현재 구독가능한 api가 없기 때문에 생성할 수 없다.    9. API proudct 만들기  Apigee -\u0026gt; Publish -\u0026gt; API Products 이동   CREATE를 선택한다.   Operations을 추가한다.   Save를 눌러 저장한다.     10. API Catalog 추가  API catalog를 선택한다.   \u0026ldquo;+\u0026rdquo; 버튼을 누른다.   okd-api-sample을 선택한다.   Published를 체크한다.   등록 완료    11. Menu에 추가  Menus를 선택한다.   \u0026ldquo;+Menu Item\u0026rdquo; 선택한다.   이름을 입력한다. Page Path or URL에 이전에 생성한 okd-api-sample을 선택한다.      12. 포털 화면으로 이동한다.  APIs를 선택하면 추가한 페이지가 보인다.   My Apps -\u0026gt; NEW APP을 선택한다. APIs 카테고리에 추가한 okd-api-sample을 확인후, Enable을 선택한다.\n  SAVE를 눌러 저장한다.    "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo4/",
	"title": "Hugo4 : css 스타일 참조",
	"tags": [],
	"description": "",
	"content": "css 파일 추가 1. config.toml 파일 수정 [params] ... custom_css = [\u0026#34;css/custom.css\u0026#34;] ... 2. css 파일 추가 static/css/custom.css 파일 추가  custom.css  img[src$=\u0026#39;#floatleft\u0026#39;] { float:left; } img[src$=\u0026#39;#floatright\u0026#39;] { float:right; } figure.floatright { max-width: 30%; width: auto\\9*0.3; /* ie8 */ height: auto; float: right; } figure.floatleft { max-width: 30%; width: auto\\9*0.3; /* ie8 */ height: auto; float: left; } 3. layouts/partials/header.html 수정 .... {{ range .Site.Params.custom_css -}} ... \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; {{- end }} .... 3. css 스타일 참조(그림 정렬) 기본 정렬\r왼쪽 정렬\r\r\u0026lt;figure\u0026gt;\u0026lt;img src=\u0026#34;/cicd/tutorial4_4.jpg\u0026#34;/\u0026gt; \u0026lt;/figure\u0026gt; \r\r\u0026lt;figure\u0026gt;\u0026lt;img src=\u0026#34;/cicd/tutorial4_4.jpg#floatleft\u0026#34;/\u0026gt; \u0026lt;/figure\u0026gt; \r\r\r\r  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial4/",
	"title": "Tutorial4 : Jenkins 설정",
	"tags": [],
	"description": "",
	"content": "Jenkins 설치 1. OKD에 로그인  okd link  [접속 화면]     2. Project 만들기   [프로젝트 생성 화면]   3. 역할 전환(developer) 좌측 상단의 역할선택 드롭메뉴에서 developer을 선택합니다.\n  4. Jenkins 설치 OKD-\u0026gt;Developer-\u0026gt;Add 4.1 All services 선택  4.2 jenkins 로 검색  4.3 Jenkins v0.0.3 Helm Charts 버전 설치 (기본 설정 사용)   4.4 설치 완료(Pods의 상태가 Running으로 바뀔때까지 대기)  5. OpenURL 아이콘을 선택해 jenkins 서비스 접속  6. Allow selected permissions 선택  7. 접속 완료 화면  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/web-console/tutorial5/",
	"title": "Tutorial5 : Add From Container Image",
	"tags": [],
	"description": "",
	"content": " sample github  1. Sample Code를 Clone한다. windows\r\r\u0026gt; git clone git@github.com:bluewhale-users/okd-tutorial2-src.git Cloning into \u0026#39;okd-tutorial2-src\u0026#39;... remote: Enumerating objects: 23, done. remote: Counting objects: 100% (23/23), done. remote: Compressing objects: 16% (3/18) Resolving deltas: 100% (1/1), done.6/18) remote: Compressing objects: 100% (18/18), done. remote: Total 23 (delta 1), reused 19 (delta 1), pack-reused 0 \r\r\r\r2. visual studio code로 열기 windows\r\r\u0026gt; cd okd-tutorial2-src \u0026gt; code ./ \r\r\r\r 3. Dockerfile을 이용한 이미지 빌드  4. 이미지 이름 입력  5. 빌드 성공  6. 이미지 실행  7. 이미지 우클릭해 \u0026ldquo;Run\u0026rdquo; 실행  8. 접속 port 확인  \u0026gt; Executing task: docker run --rm -d -p 3000:3000/tcp tutorial2-src:latest \u0026lt; 9. 실행 확인  10. 브라우저에서 접속 확인 http://localhost:3000  11. Dockerhub에 이미지 업로드   dockerhub Home\n  dockerhub 설정 참고\n  dockerhub 접속    Create Repository 선택    리파지터리 이름을 입력후 public 저장소로 만든다.    저장소 생성    push command\n  docker push spcsenti/tutorial2-src:tagname  docker login  \u0026gt;docker login -u \u0026#34;your id\u0026#34; Password: Login Succeeded Logging in with your password grants your terminal complete access to your account. For better security, log in with a limited-privilege personal access token. Learn more at https://docs.docker.com/go/access-tokens/  // 이미지 태그 변경 \u0026gt; docker tag tutorial2-src:latest \u0026#34;your id\u0026#34;/tutorial2-src:latest \u0026gt; docker push \u0026#34;your id\u0026#34;/tutorial2-src:latest \u0026gt;docker tag tutorial2-src:latest \u0026#34;your id\u0026#34;/tutorial2-src:latest \u0026gt;docker push \u0026#34;your id\u0026#34;/tutorial2-src:latest The push refers to repository [docker.io/\u0026#34;your id\u0026#34;/tutorial2-src] 60ecf9354b04: Pushed 68a6cff145b3: Pushed 11eaee07b9a1: Pushed af05d497050a: Pushed da7b93b499cd: Pushed 6cfd9fa8083f: Pushed 78bb105cd27d: Pushed c26a5692b560: Pushed 0cd41aa80b1f: Pushed 7a6d0f54488f: Pushed 6ef8823b489f: Pushed 9578c16f3f7c: Pushed 3141322c5cdb: Pushed latest: digest: sha256:2951d4484879a51e1eae869c394cb49e0879e8f633a918efe94a5242736a85be size: 3050  이미지 업로드 확인    12. Add to Project -\u0026gt; Container Image 선택   레지스트리 주소 입력(다른 설정은 기본값 사용)    레지스트리 주소 : docker.io/spcsenti/tutorial2-src:latest   배포 확인    접속 확인    "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee5/",
	"title": "Apigee5 : 개발자 포털2",
	"tags": [],
	"description": "",
	"content": "개발자 포털  Open-API-Specification  1. API Document 추가  API catalog 선택    2. Portals -\u0026gt; Pages 이동  API 선택(okd-api-sample)    3. 우측의 연필 모양 클릭해 편집모드로 변경  4. API Documentation   Source API sepc 리스트박스 선택(Select OpenAPI Spec)    JSON 파일 업로드     json sample\n  {  \u0026#34;openapi\u0026#34;: \u0026#34;3.0.1\u0026#34;,  \u0026#34;info\u0026#34;: {  \u0026#34;title\u0026#34;: \u0026#34;okd-sample-API Service\u0026#34;,  \u0026#34;version\u0026#34;: \u0026#34;v1\u0026#34;  },  \u0026#34;servers\u0026#34;: [  {  \u0026#34;url\u0026#34;: \u0026#34;https://dotnetexample-okd-tutorial.apps.blackwhale.cloud.hancom.com/\u0026#34;  }  ],  \u0026#34;paths\u0026#34;: {  \u0026#34;/Document\u0026#34;: {  \u0026#34;get\u0026#34;: {  \u0026#34;tags\u0026#34;: [  \u0026#34;Document\u0026#34;  ],  \u0026#34;operationId\u0026#34;: \u0026#34;GetDocument\u0026#34;,  \u0026#34;responses\u0026#34;: {  \u0026#34;200\u0026#34;: {  \u0026#34;description\u0026#34;: \u0026#34;Success\u0026#34;,  \u0026#34;content\u0026#34;: {  \u0026#34;text/plain\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/DocumentModel\u0026#34;  }  }  },  \u0026#34;application/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/DocumentModel\u0026#34;  }  }  },  \u0026#34;text/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/DocumentModel\u0026#34;  }  }  }  }  }  }  }  },  \u0026#34;/WeatherForecast\u0026#34;: {  \u0026#34;get\u0026#34;: {  \u0026#34;tags\u0026#34;: [  \u0026#34;WeatherForecast\u0026#34;  ],  \u0026#34;operationId\u0026#34;: \u0026#34;GetWeatherForecast\u0026#34;,  \u0026#34;responses\u0026#34;: {  \u0026#34;200\u0026#34;: {  \u0026#34;description\u0026#34;: \u0026#34;Success\u0026#34;,  \u0026#34;content\u0026#34;: {  \u0026#34;text/plain\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/WeatherForecast\u0026#34;  }  }  },  \u0026#34;application/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/WeatherForecast\u0026#34;  }  }  },  \u0026#34;text/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/WeatherForecast\u0026#34;  }  }  }  }  }  }  }  }  },  \u0026#34;components\u0026#34;: {  \u0026#34;schemas\u0026#34;: {  \u0026#34;DocumentModel\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,  \u0026#34;properties\u0026#34;: {  \u0026#34;date\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34;  },  \u0026#34;name\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;nullable\u0026#34;: true  },  \u0026#34;summary\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;nullable\u0026#34;: true  }  },  \u0026#34;additionalProperties\u0026#34;: false  },  \u0026#34;WeatherForecast\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,  \u0026#34;properties\u0026#34;: {  \u0026#34;date\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34;  },  \u0026#34;temperatureC\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;int32\u0026#34;  },  \u0026#34;temperatureF\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;int32\u0026#34;,  \u0026#34;readOnly\u0026#34;: true  },  \u0026#34;summary\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;nullable\u0026#34;: true  }  },  \u0026#34;additionalProperties\u0026#34;: false  }  }  } } 5. SAVE 선택   6. Live Portal로 이동해 적용 확인    "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial5/",
	"title": "Tutorial5 : Jenkins Pipeline 구성",
	"tags": [],
	"description": "",
	"content": "Jenkins Pipeline 구성 1. ssh agent plug-in 설치  Jenkins -\u0026gt; Jenkins 관리 -\u0026gt; 플러그인 관리 이동 \u0026ldquo;ssh agent\u0026rdquo; 검색   1.1 Download now and install after restart 선택  1.2 설치가 끝나고 실행중인 작업이 없으면 Jenkins 재시작 선택  1.3 로그인 화면  2. credentials 등록  Jenkins -\u0026gt; Jenkins 관리 -\u0026gt; Manage Credentials 이동  2.1 (Global) 도메인 선택  2.2 Add Credentials 선택   Jenkinsfile 확인  jenkinsfile의 credentialsId 이름으로 등록한다.\ncredentialsId \u0026lsquo;jenkins-ssh-private\u0026rsquo;\nID : jenkins-ssh-private\nUsername : jenkins-ssh-private\nPrivate Key : 이전단계에서 생성한 Private key를 등록한다.\n\r  3. 새로운 아이템 생성  item name : okd-turotial\ntype : pipeline 선택\n\r 3.1 General 설정 GitHub project 체크\nProject url : https://github.com/blackwhale-testuser/okd-tutorial1-src\n\r 3.2 Build Triggers 설정 GitHub hook trigger for GITScm polling 체크\n\r 3.3 Pipeline 설정 Definition : Pipeline script from SCM 선택\nRepository URL : https://github.com/blackwhale-testuser/okd-tutorial1-src\nBranch Specifier : */master\n\r  SCM(Source Code Management) : git이나 svn과 같은 소스관리 도구\n "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee6/",
	"title": "Apigee6 : 개발자 포털3",
	"tags": [],
	"description": "",
	"content": "1. 페이지 추가(\u0026quot;+Page\u0026quot; 선택)  2. 페이지 이름 입력(경록 확인 : test)  3. 페이지 편집  Publish 선택    4. 메뉴 추가  5. 메뉴 이름 입력(Page Path 입력 : test)  6. Publish 선택  7. Live Portal 확인  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial6/",
	"title": "Tutorial6 : Buildconfig 설정",
	"tags": [],
	"description": "",
	"content": "OKD Buildconfig 설정 설치한 Jenkins 버전에는 docker를 포함하지 않는다.\ndocker image 빌드를 위해 okd buildconfig를 사용한다.\n\r1. BuildConfig 생성  okd -\u0026gt; Developer -\u0026gt; Builds    1.1 Create BuildConfig 선택   Jenkinsfile 확인  BuildConfig 이름을 jenkinsfile에 appName으로 맵핑된다.\njenkinsfile의 appName을 BuildConfig의 이름으로 변경한다.\nappName = \u0026ldquo;okd-tutorial\u0026rdquo;\n\r1.2 아래 내용을 편집해 본인 설정에 맞게 변경한다. BuildConfig YAML 샘플\nkind: BuildConfig apiVersion: build.openshift.io/v1 metadata:  name: okd-tutorial  labels:  app.kubernetes.io/name: okd-tutorial spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: \u0026#39;docker.io/spcsenti2023/okdtutorial:latest\u0026#39;  strategy:  type: Docker  dockerStrategy:  dockerfilePath: Dockerfile  postCommit: {}  source:  type: Binary  binary: {}  runPolicy: Serial 1.3 생성 화면  2. Secrets 추가  2.1 Create(Image pull secret) 선택  2.2 dockerhub에 가입한 아이디와 패스워드를 입력한다. Secret name : dockerio-okdtutorial\n\r 3. ServiceAccount(builder)에 secret 추가  okd -\u0026gt; Administrator -\u0026gt; User Management -\u0026gt; ServiceAccounts 이동    4. builder 선택  5. Secrets 섹션에 dockerio-okdtutorial 추가후 Save 선택  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee7/",
	"title": "Apigee7 : API Proxies Demo",
	"tags": [],
	"description": "",
	"content": "1. Create New  2. Reverse Proxy 선택  3. Proxy details  Name: okd-api Base path: okd-api Target: https://dotnetexample-okd-tutorial.apps.blackwhale.cloud.hancom.com/Document  Security(Authorization) : API Key Quota: Impose quotas per App Security(Browser) : Add CORS headers 4. Summary  5. Edit Proxy  6. Overview  7. eval(개발환경) deploy   Deploy 선택    8. DEVELOP 탭 확인  9. PreFlow [Policies] - Add CORS - Impose Quota - Remove Query Param apikey - Verify API Key  10. API Products 추가(Create New 선택)  11. Product details 입력  Name: okd-api-product Display Name: Demo API Environment: eval Access: Public 12. Oprations 추가(ADD AN OPERATION)  API Proxy : okd-api Operation: /okd-api Methods: 모두 선택 13. Save를 눌러 저장한다.  14. Potal로 이동(API catalog 선택)  15. API Documenttation 추가 API URL [sample json]\n{  \u0026#34;openapi\u0026#34;: \u0026#34;3.0.1\u0026#34;,  \u0026#34;info\u0026#34;: {  \u0026#34;title\u0026#34;: \u0026#34;okd-sample-API Service\u0026#34;,  \u0026#34;version\u0026#34;: \u0026#34;v1\u0026#34;  },  \u0026#34;servers\u0026#34;: [  {  \u0026#34;url\u0026#34;: \u0026#34;https://spsenti2023.duckdns.org/\u0026#34;  }  ],  \u0026#34;paths\u0026#34;: {  \u0026#34;/Document\u0026#34;: {  \u0026#34;get\u0026#34;: {  \u0026#34;tags\u0026#34;: [  \u0026#34;okd-api\u0026#34;  ],  \u0026#34;operationId\u0026#34;: \u0026#34;GetDocument\u0026#34;,  \u0026#34;responses\u0026#34;: {  \u0026#34;200\u0026#34;: {  \u0026#34;description\u0026#34;: \u0026#34;Success\u0026#34;,  \u0026#34;content\u0026#34;: {  \u0026#34;text/plain\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/DocumentModel\u0026#34;  }  }  },  \u0026#34;application/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/DocumentModel\u0026#34;  }  }  },  \u0026#34;text/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/DocumentModel\u0026#34;  }  }  }  }  }  }  }  },  \u0026#34;/WeatherForecast\u0026#34;: {  \u0026#34;get\u0026#34;: {  \u0026#34;tags\u0026#34;: [  \u0026#34;WeatherForecast\u0026#34;  ],  \u0026#34;operationId\u0026#34;: \u0026#34;GetWeatherForecast\u0026#34;,  \u0026#34;responses\u0026#34;: {  \u0026#34;200\u0026#34;: {  \u0026#34;description\u0026#34;: \u0026#34;Success\u0026#34;,  \u0026#34;content\u0026#34;: {  \u0026#34;text/plain\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/WeatherForecast\u0026#34;  }  }  },  \u0026#34;application/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/WeatherForecast\u0026#34;  }  }  },  \u0026#34;text/json\u0026#34;: {  \u0026#34;schema\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;array\u0026#34;,  \u0026#34;items\u0026#34;: {  \u0026#34;$ref\u0026#34;: \u0026#34;#/components/schemas/WeatherForecast\u0026#34;  }  }  }  }  }  }  }  }  },  \u0026#34;components\u0026#34;: {  \u0026#34;schemas\u0026#34;: {  \u0026#34;DocumentModel\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,  \u0026#34;properties\u0026#34;: {  \u0026#34;date\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34;  },  \u0026#34;name\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;nullable\u0026#34;: true  },  \u0026#34;summary\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;nullable\u0026#34;: true  }  },  \u0026#34;additionalProperties\u0026#34;: false  },  \u0026#34;WeatherForecast\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,  \u0026#34;properties\u0026#34;: {  \u0026#34;date\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34;  },  \u0026#34;temperatureC\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;int32\u0026#34;  },  \u0026#34;temperatureF\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;,  \u0026#34;format\u0026#34;: \u0026#34;int32\u0026#34;,  \u0026#34;readOnly\u0026#34;: true  },  \u0026#34;summary\u0026#34;: {  \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,  \u0026#34;nullable\u0026#34;: true  }  },  \u0026#34;additionalProperties\u0026#34;: false  }  }  } } "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial7/",
	"title": "Tutorial7 : 테스트 빌드",
	"tags": [],
	"description": "",
	"content": "Jenkins Test Build 1. Build now 선택  2. 빌드 성공  3. dockerhub 이미지 push 확인  4. gitops repo 확인  5. jenkinsfile 확인 library identifier: \u0026#34;pipeline-library@v1.5\u0026#34;, retriever: modernSCM(  [  $class: \u0026#34;GitSCMSource\u0026#34;,  remote: \u0026#34;https://github.com/redhat-cop/pipeline-library.git\u0026#34;  ] )  // OKD의 Buildconifg의 이름과 일치시켜야 한다. appName = \u0026#34;okd-tutorial\u0026#34;  pipeline {  agent {  node {  label \u0026#39;nodejs\u0026#39;  }  }  options {  timeout(time: 20, unit: \u0026#39;MINUTES\u0026#39;)  }  stages {  stage(\u0026#34;Checkout\u0026#34;) {  steps {  checkout scm  }  }  stage(\u0026#39;Build\u0026#39;) {  steps {  sh \u0026#39;npm install\u0026#39;  sh \u0026#39;CI=false npm run build\u0026#39;  }  }  stage(\u0026#34;Docker Build\u0026#34;) {  steps {  // This uploads your application\u0026#39;s source code and performs a binary build in OpenShift // This is a step defined in the shared library (see the top for the URL) // (Or you could invoke this step using \u0026#39;oc\u0026#39; commands!) binaryBuild(buildConfigName: appName, buildFromPath: \u0026#34;.\u0026#34;) } } stage(\u0026#34;Update Tag\u0026#34;) { steps { checkout([$class: \u0026#39;GitSCM\u0026#39;, branches: [[name: \u0026#39;*/master\u0026#39; ]], extensions: scm.extensions, userRemoteConfigs: [[ url: \u0026#39;git@github.com:blackwhale-testuser/okd-tutorial1-gitops.git\u0026#39;, credentialsId: \u0026#39;jenkins-ssh-private\u0026#39;, ]] ]) sshagent(credentials: [\u0026#39;jenkins-ssh-private\u0026#39;]){ sh(\u0026#34;\u0026#34;\u0026#34; #!/usr/bin/env bash set +x export GIT_SSH_COMMAND=\u0026#34;ssh -oStrictHostKeyChecking=no\u0026#34; echo Build Number = {$BUILD_NUMBER} git config --global user.email \u0026#34;test@gmail.com\u0026#34; git checkout master cp --f base/deployment-sample.yaml okd-deploy/testblog-deployment.yaml cd okd-deploy sed -i \u0026#39;s/MY_BUILD_TAG/$BUILD_NUMBER/\u0026#39; testblog-deployment.yaml  cat testblog-deployment.yaml  git commit -a -m \u0026#34;demo tag\u0026#34;  git push  \u0026#34;\u0026#34;\u0026#34;) } } } } } "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee8/",
	"title": "Apigee8 : VS Code에서 Apigee를 사용해 API 프록시 빌드하기",
	"tags": [],
	"description": "",
	"content": "작업 순서  Apigee 작업공간을 만들어 Apigee를 사용하는 로컬 개발에 필요한 디렉터리 구조를 설정합니다. API 프록시를 만듭니다. API 프록시를 모의 대상 엔드포인트에 연결하여 작동 방식을 확인할 수 있습니다. 새 API 프록시가 포함된 환경을 구성하고 배포합니다. API를 테스트합니다. 테스트 리소스를 빌드하고 내보내고 API를 테스트하기 위해 API 키를 사용하여 인증하는 방법을 알아봅니다. API 프록시에서 XML 데이터를 반환하도록 대상 엔드포인트를 변경합니다. 정책을 연결하여 응답을 XML에서 JSON으로 변환합니다. Apigee 환경에 배포합니다. 보관 파일을 프로덕션으로 승격합니다.  Apigee 작업 공간 만들기 1. Extention 설치  Apigee 검색후 Cloud Code 설치\n   2. Cloud Code - Apigee 클릭  3. Apigee 작업공간 만들기  Create Apigee workspace 선택\n   4. 이름을 입력후 엔터(myapigeeworkspace)  5. Explorer 확인   API 프록시 만들기 1. Apigee 탐색기로 이동  apiproxies 폴더위에 커서를 놓고 +를 클릭하면 프록시 만들기 마법사가 열립니다.    2. 역방향 프록시(Reverse proxy)를 선택  API 키 기반 인증 선택    3. 프롬프트에 다음 값 입력    입력 값 설명     Backend target URL https://mocktarget.apigee.net Apigee가 API 프록시에 대한 요청에서 호출하는 대상 URL입니다. mocktarget 서비스는 Apigee에서 호스팅되며 간단한 데이터를 반환합니다.   API proxy name helloworld API 프록시를 식별하는 데 사용되는 이름입니다.   API proxy base path helloworld API에 요청을 보내는 데 사용되는 URL의 일부입니다. Apigee는 URL을 사용하여 수신 요청을 적절한 API 프록시로 일치시키며 라우팅합니다.       4. 프록시 생성 확인   환경 구성 및 배포 1. 환경 생성   environments의 +버튼 클릭(환경이름 : dev)    dev 환경 확인    deployments.json 편집    { \u0026#34;proxies\u0026#34; : [ \u0026#34;helloworld\u0026#34; ], \u0026#34;sharedflows\u0026#34; : [] } 2. Apigee 에뮬레이터를 설치   EMULATORS 이동해 우측 구름 아이콘 클릭(이름입력 : apigee-emulator)    제어포트 선택(8080)    트래픽 포트 선택(8998)    완료 화면    $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a8eb5f815a8f gcr.io/apigee-release/hybrid/apigee-emulator:1.6.1 \u0026#34;/usr/bin/dumb-init …\u0026#34; 34 minutes ago Up 33 minutes 7000-7001/tcp, 0.0.0.0:8080-\u0026gt;8080/tcp, 7199/tcp, 9042/tcp, 9160/tcp, 0.0.0.0:8998-\u0026gt;8998/tcp apigee-emulator 3. dev환경 폴더의 우측 지구본 아이콘 클릭   출력탭 확인\n    API 테스트 1. 터미널탭에서 curl 호출 $ curl localhost:8998/helloworld {\u0026#34;fault\u0026#34;:{\u0026#34;faultstring\u0026#34;:\u0026#34;Failed to resolve API Key variable request.queryparam.apikey\u0026#34;,\u0026#34;detail\u0026#34;:{\u0026#34;errorcode\u0026#34;:\u0026#34;steps.oauth.v2.FailedToResolveAPIKey\u0026#34;}}} API 키 기반인증 사용 설정으로 인한 오류 메시지 표시됨 apikey 쿼리 매개변수를 사용하여 API 키를 전달해야 한다. API 키를 얻으려면 테스트 번들을 만들고 다음 테스트 리소스를 구성해야 합니다. - API 제품: API를 번들로 만들고 개발자에게 제공하는 데 사용합니다. - 개발자: API에 액세스할 앱을 만듭니다. - 개발자 앱: API 키를 사용하여 API에 액세스할 수 있도록 설정합니다. 2. 테스트 번들 만들기   테스트 폴더의 +버튼을 눌러 추가(이름 : mytestbundle)    products.json 파일 우측의 +클릭(제품이름 : myproduct)    설명 입력    helloworld 선택     products.json\n [ { \u0026#34;attributes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;sample_attribute_0\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;sample_attribute_value_0\u0026#34; } ], \u0026#34;scopes\u0026#34;: [], \u0026#34;environments\u0026#34;: [], \u0026#34;apiResources\u0026#34;: [ \u0026#34;/\u0026#34;, \u0026#34;/*\u0026#34;, \u0026#34;/**\u0026#34; ], \u0026#34;quota\u0026#34;: \u0026#34;100\u0026#34;, \u0026#34;quotaInterval\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;quotaTimeUnit\u0026#34;: \u0026#34;minute\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;myproduct\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;myproduct\u0026#34;, \u0026#34;proxies\u0026#34;: [ \u0026#34;helloworld\u0026#34; ] } ] 3. 개발자 테스트 리소스 구성  developers.json파일 우측의 \u0026ldquo;+\u0026rdquo; 클릭(이메일 입력)       개발자 이메일: hskim@XXXX.com 사용자 이름: hskim 이름: haksoo 성: kim  developers.json\n [ { \u0026#34;attributes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;sample_attribute_0\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;sample_attribute_value_0\u0026#34; } ], \u0026#34;email\u0026#34;: \u0026#34;hskim@XXXX.com\u0026#34;, \u0026#34;userName\u0026#34;: \u0026#34;hskim\u0026#34;, \u0026#34;firstName\u0026#34;: \u0026#34;haksoo\u0026#34;, \u0026#34;lastName\u0026#34;: \u0026#34;kim\u0026#34; } ] 4. 개발자 앱 테스트 리소스 구성   developerapps.json파일 우측의 +클릭(사용자 등록 이메일 선택)    myapp 입력    myapp 입력    callback url 비워놓기    myproduct 선택    앱 소유자 hskim@XXXX.com 앱 이름: myapp 설명: myapp 콜백 URL: 비워 둠 만료값 : 사용안함  developerapps.json\n [ { \u0026#34;attributes\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;sample_attribute_0\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;sample_attribute_value_0\u0026#34; } ], \u0026#34;developerEmail\u0026#34;: \u0026#34;hskim@hancom.com\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;myapp\u0026#34;, \u0026#34;displayName\u0026#34;: \u0026#34;myapp\u0026#34;, \u0026#34;callbackUrl\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;apiProducts\u0026#34;: [ \u0026#34;myproduct\u0026#34; ], \u0026#34;expiryType\u0026#34;: \u0026#34;never\u0026#34; } ] 5. Apigee 에뮬레이터로 테스트 리소스 내보내기   mytestbundle 우측의 내보내기 버튼 클릭    Active test data에 표시    에뮬레이터 탭의 Active developer apps 확인(consumerKey가 등록되어 있다.)    apikey 확인\n  \u0026#34;consumerKey\u0026#34;: \u0026#34;ecQEvhRpieEjz75KArOP1U66GGXkoQqN\u0026#34;,  curl 호출하여 응답 확인  $ curl localhost:8998/helloworld?apikey=ecQEvhRpieEjz75KArOP1U66GGXkoQqN Hello, Guest!  대상 엔드포인트 변경  helloworld API 프록시 번들을 펼치고 targets 폴더에서 default.xml을 클릭하여 편집    \u0026lt;TargetEndpoint name=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;HTTPTargetConnection\u0026gt; \u0026lt;URL\u0026gt;https://mocktarget.apigee.net\u0026lt;/URL\u0026gt; \u0026lt;/HTTPTargetConnection\u0026gt; \u0026lt;/TargetEndpoint\u0026gt;  URL 변경\n \u0026lt;TargetEndpoint name=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;HTTPTargetConnection\u0026gt; \u0026lt;URL\u0026gt;https://mocktarget.apigee.net/xml\u0026lt;/URL\u0026gt; \u0026lt;/HTTPTargetConnection\u0026gt; \u0026lt;/TargetEndpoint\u0026gt;   저장후 dev 환경 폴더의 배포 아이콘을 클릭    Deploy without a test bundle 선택후 배포    curl 실행 결과\n  $ curl localhost:8998/helloworld?apikey=EdKgpEh5jSN9cxlAdfaL2uBYorINbTKE \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;root\u0026gt;\u0026lt;city\u0026gt;San Jose\u0026lt;/city\u0026gt;\u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt;\u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt;\u0026lt;state\u0026gt;CA\u0026lt;/state\u0026gt;\u0026lt;/root\u0026gt;  정책 연결  정책은 메시지 형식 변환, 액세스 제어 적용, 원격 서비스 호출, 사용자 승인, 메시지 콘텐츠에서 잠재적 위협 검사 이상의 작업을 수행할 수 있습니다.\n 1. 새 정책을 만들고 PreFlow 응답 흐름의 API 프록시에 연결하여 다른 처리가 실행되기 전에 정책이 적용되도록 합니다.   XMLtoJSON 정책을 만든다. (polocies폴더의 +버튼을 클릭한다.)    미디에이션을 선택    XML to JSON 정책 유형 선택    정책이름(XMLtoJSON) 입력    XMLtoJSON.xml파일이 추가된 화면    \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;XMLToJSON async=\u0026#34;false\u0026#34; continueOnError=\u0026#34;false\u0026#34; enabled=\u0026#34;true\u0026#34; name=\u0026#34;XMLtoJSON\u0026#34;\u0026gt; \u0026lt;DisplayName\u0026gt;XMLtoJSON\u0026lt;/DisplayName\u0026gt; \u0026lt;Properties/\u0026gt; \u0026lt;Format\u0026gt;yahoo\u0026lt;/Format\u0026gt; \u0026lt;OutputVariable\u0026gt;request\u0026lt;/OutputVariable\u0026gt; \u0026lt;Source\u0026gt;request\u0026lt;/Source\u0026gt; \u0026lt;/XMLToJSON\u0026gt;  OutputVariable 및 Source 요소 변경\n \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;XMLToJSON async=\u0026#34;false\u0026#34; continueOnError=\u0026#34;false\u0026#34; enabled=\u0026#34;true\u0026#34; name=\u0026#34;XMLtoJSON\u0026#34;\u0026gt; \u0026lt;DisplayName\u0026gt;XMLtoJSON\u0026lt;/DisplayName\u0026gt; \u0026lt;Properties/\u0026gt; \u0026lt;Format\u0026gt;yahoo\u0026lt;/Format\u0026gt; \u0026lt;OutputVariable\u0026gt;response\u0026lt;/OutputVariable\u0026gt; \u0026lt;Source\u0026gt;response\u0026lt;/Source\u0026gt; \u0026lt;/XMLToJSON\u0026gt; 2. 정책을 기본 프록시 엔드포인트에 연결  helloworld API 프록시 번들의 프록시 폴더를 열고 default.xml을 편집  \u0026lt;ProxyEndpoint name=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;PreFlow name=\u0026#34;PreFlow\u0026#34;\u0026gt; \u0026lt;Request\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;verify-api-key\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;remove-query-param-apikey\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;impose-quota\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;/Request\u0026gt; \u0026lt;/PreFlow\u0026gt; \u0026lt;HTTPProxyConnection\u0026gt; \u0026lt;BasePath\u0026gt;/helloworld\u0026lt;/BasePath\u0026gt; \u0026lt;/HTTPProxyConnection\u0026gt; \u0026lt;RouteRule name=\u0026#34;default-route\u0026#34;\u0026gt; \u0026lt;TargetEndpoint\u0026gt;default\u0026lt;/TargetEndpoint\u0026gt; \u0026lt;/RouteRule\u0026gt; \u0026lt;/ProxyEndpoint\u0026gt;  아래와 같이 Response 요소를 추가  \u0026lt;ProxyEndpoint name=\u0026#34;default\u0026#34;\u0026gt; \u0026lt;PreFlow name=\u0026#34;PreFlow\u0026#34;\u0026gt; \u0026lt;Request\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;verify-api-key\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;remove-query-param-apikey\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;impose-quota\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;/Request\u0026gt; \u0026lt;Response\u0026gt; \u0026lt;Step\u0026gt; \u0026lt;Name\u0026gt;XMLtoJSON\u0026lt;/Name\u0026gt; \u0026lt;/Step\u0026gt; \u0026lt;/Response\u0026gt; \u0026lt;/PreFlow\u0026gt; ... \u0026lt;/ProxyEndpoint\u0026gt;   dev환경의 배포 아이콘을 클릭(Deploy without a test bundle 선택)    curl 수행(XML응답이 다음과 같이 JSON으로 변환된다.)\n  $ curl localhost:8998/helloworld?apikey=EdKgpEh5jSN9cxlAdfaL2uBYorINbTKE {\u0026#34;root\u0026#34;:{\u0026#34;city\u0026#34;:\u0026#34;San Jose\u0026#34;,\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;,\u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;,\u0026#34;state\u0026#34;:\u0026#34;CA\u0026#34;} "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial8/",
	"title": "Tutorial8 : ArgoCD 설정",
	"tags": [],
	"description": "",
	"content": "ArgoCD 설치 1. ArgoCD Operator 이동  okd -\u0026gt; Administrator -\u0026gt; Operators -\u0026gt; Installed Operators 이동    2. ArgoCD 탭으로 이동후 Create ArgoCD 선택    3. Developer로 변경후 Topology 확인  okd -\u0026gt; Developer -\u0026gt; Topology    4. ArgoCD Admin 패스워드 확인  okd -\u0026gt; Developer -\u0026gt; Secrets 이동 cluster 검색    argocd-sample-cluster 시크릿 확인  Reveal values 클릭 (복호화된 admin password를 확인할 수 있다.)  암호 변경은 YAML 탭으로 변경후 admin.password: 필드에 base64로 인코딩한 암호를 붙여넣는다.\n\r5. Topology로 이동후 argocd-sample-server의 OpenURL을 선택한다. \rUsername : admin\nPassword : r8BtkSKu3J0ex4TXUbs***********\n\r  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/apigee9/",
	"title": "Apigee9 : Apigee 환경에 배포하기",
	"tags": [],
	"description": "",
	"content": "0. Google Cloud SDK와 gcloud beta apigee 구성요소 설치  gcloud beta 구성요소 설치  gcloud components install beta  베타 구성요소 설치 확인  $ gcloud components list Your current Google Cloud CLI version is: 373.0.0 The latest available version is: 373.0.0 ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────┐ │ Components │ ├───────────────┬──────────────────────────────────────────────────────┬──────────────────────────┬──────────┤ │ Status │ Name │ ID │ Size │ ├───────────────┼──────────────────────────────────────────────────────┼──────────────────────────┼──────────┤ │ Not Installed │ App Engine Go Extensions │ app-engine-go │ 4.2 MiB │ │ Not Installed │ Appctl │ appctl │ 18.7 MiB │ │ Not Installed │ Cloud Bigtable Command Line Tool │ cbt │ 8.4 MiB │ │ Not Installed │ Cloud Bigtable Emulator │ bigtable │ 5.9 MiB │ │ Not Installed │ Cloud Datalab Command Line Tool │ datalab │ \u0026lt; 1 MiB │ │ Not Installed │ Cloud Datastore Emulator │ cloud-datastore-emulator │ 18.4 MiB │ │ Not Installed │ Cloud Firestore Emulator │ cloud-firestore-emulator │ 40.5 MiB │ │ Not Installed │ Cloud Pub/Sub Emulator │ pubsub-emulator │ 60.7 MiB │ │ Not Installed │ Cloud SQL Proxy │ cloud_sql_proxy │ 7.4 MiB │ │ Not Installed │ Google Container Registry\u0026#39;s Docker credential helper │ docker-credential-gcr │ 1.8 MiB │ │ Not Installed │ anthos-auth │ anthos-auth │ 18.1 MiB │ │ Not Installed │ config-connector │ config-connector │ 49.7 MiB │ │ Not Installed │ gcloud Alpha Commands │ alpha │ \u0026lt; 1 MiB │ │ Not Installed │ gcloud app Java Extensions │ app-engine-java │ 51.6 MiB │ │ Not Installed │ gcloud app PHP Extensions │ app-engine-php │ 19.1 MiB │ │ Not Installed │ gcloud app Python Extensions │ app-engine-python │ 7.8 MiB │ │ Not Installed │ gcloud app Python Extensions (Extra Libraries) │ app-engine-python-extras │ 26.4 MiB │ │ Not Installed │ kubectl-oidc │ kubectl-oidc │ 18.1 MiB │ │ Not Installed │ pkg │ pkg │ │ │ Installed │ BigQuery Command Line Tool │ bq │ 1.0 MiB │ │ Installed │ Cloud Storage Command Line Tool │ gsutil │ 8.1 MiB │ │ Installed │ Google Cloud CLI Core Libraries │ core │ 22.2 MiB │ │ Installed │ Minikube │ minikube │ 27.3 MiB │ │ Installed │ Skaffold │ skaffold │ 17.8 MiB │ │ Installed │ gcloud Beta Commands │ beta │ \u0026lt; 1 MiB │ │ Installed │ kubectl │ kubectl │ \u0026lt; 1 MiB │ └───────────────┴──────────────────────────────────────────────────────┴──────────────────────────┴──────────┘ To install or remove components at your current SDK version [373.0.0], run: $ gcloud components install COMPONENT_ID $ gcloud components remove COMPONENT_ID To update your SDK installation to the latest version [373.0.0], run: $ gcloud components update  gcloud에 대한 액세스 권한 승인(Cloud SDK 초기화의 설명에 따라 계정을 인증하고 액세스 권한을 부여하고 Cloud SDK 설치를 초기화합니다.)  $ gcloud init Welcome! This command will take you through the configuration of gcloud. Your current configuration has been set to: [default] You can skip diagnostics next time by using the following flag: gcloud init --skip-diagnostics Network diagnostic detects and fixes local network connection issues. Checking network connection...done. Reachability Check passed. Network diagnostic passed (1/1 checks passed). You must log in to continue. Would you like to log in (Y/n)? y Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?response_type=code\u0026amp;client_id=32555940559.apps.googleusercontent.com\u0026amp;redirect_uri=http%3A%2F%2Flocalhost%3A8085%2F\u0026amp;scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth\u0026amp;state=EEOOAQ5tPUJqdDcPn3scJTRVd38L4T\u0026amp;access_type=offline\u0026amp;code_challenge=v3xratBRwmNAVE5x1vb25t8q-5PVSvAj4pnbVoFtBTs\u0026amp;code_challenge_method=S256 You are logged in as: [spcsenti2023@gmail.com]. Pick cloud project to use: [1] pure-fold-339305 [2] Enter a project ID [3] Create a new project Please enter numeric choice or text value (must exactly match list item): PS D:\\Git\\apigee\\myapigeeworkspace\u0026gt; gcloud init Please enter a value between 1 and 3, or a value present in the list: Welcome! This command will take you through the configuration of gcloud. Please enter a value between 1 and 3, or a value present in the list: Please enter a value between 1 and 3, or a value present in the list: Your current configuration has been set to: [default] Please enter a value between 1 and 3, or a value present in the list: Please enter a value between 1 and 3, or a value present in the list: You can skip diagnostics next time by using the following flag: Please enter a value between 1 and 3, or a value present in the list: gcloud init --skip-diagnostics Please enter a value between 1 and 3, or a value present in the list: Please enter a value between 1 and 3, or a value present in the list: Network diagnostic detects and fixes local network connection issues. Please enter a value between 1 and 3, or a value present in the list: Checking network connection...done. Please enter a value between 1 and 3, or a value present in the list: Reachability Check passed. Please enter a value between 1 and 3, or a value present in the list: Network diagnostic passed (1/1 checks passed). Please enter a value between 1 and 3, or a value present in the list: Please enter a value between 1 and 3, or a value present in the list: You must log in to continue. Would you like to log in (Y/n)? y Please enter a value between 1 and 3, or a value present in the list: 1 Your current project has been set to: [pure-fold-339305]. Do you want to configure a default Compute Region and Zone? (Y/n)? y Which Google Compute Engine zone would you like to use as project default? If you do not specify a zone via a command line flag while working with Compute Engine resources, the default is assumed. [1] us-east1-b [2] us-east1-c [3] us-east1-d [4] us-east4-c [5] us-east4-b [6] us-east4-a [7] us-central1-c [8] us-central1-a [9] us-central1-f [10] us-central1-b [11] us-west1-b [12] us-west1-c [13] us-west1-a [14] europe-west4-a [15] europe-west4-b [16] europe-west4-c [17] europe-west1-b [18] europe-west1-d [19] europe-west1-c [20] europe-west3-c [21] europe-west3-a [22] europe-west3-b [23] europe-west2-c [24] europe-west2-b [25] europe-west2-a [26] asia-east1-b [27] asia-east1-a [28] asia-east1-c [29] asia-southeast1-b [30] asia-southeast1-a [31] asia-southeast1-c [32] asia-northeast1-b [33] asia-northeast1-c [34] asia-northeast1-a [35] asia-south1-c [36] asia-south1-b [37] asia-south1-a [38] australia-southeast1-b [39] australia-southeast1-c [40] australia-southeast1-a [41] southamerica-east1-b [42] southamerica-east1-c [43] southamerica-east1-a [44] asia-east2-a [45] asia-east2-b [46] asia-east2-c [47] asia-northeast2-a [48] asia-northeast2-b [49] asia-northeast2-c [50] asia-northeast3-a Did not print [39] options. Too many options [89]. Enter \u0026#34;list\u0026#34; at prompt to print choices fully. Please enter numeric choice or text value (must exactly match list item): 27 Your project default Compute Engine zone has been set to [asia-east1-a]. You can change it by running [gcloud config set compute/zone NAME]. Your project default Compute Engine region has been set to [asia-east1]. You can change it by running [gcloud config set compute/region NAME]. Created a default .boto configuration file at [C:\\Users\\user\\.boto]. See this file and [https://cloud.google.com/storage/docs/gsutil/commands/config] for more information about configuring Google Cloud Storage. Your Google Cloud SDK is configured and ready to use! * Commands that require authentication will use spcsenti2023@gmail.com by default * Commands will reference project `pure-fold-339305` by default * Compute Engine commands will use region `asia-east1` by default * Compute Engine commands will use zone `asia-east1-a` by default Run `gcloud help config` to learn how to change individual settings This gcloud configuration is called [default]. You can create additional configurations if you work with multiple accounts and/or projects. Run `gcloud topic configurations` to learn more. Some things to try next: * Run `gcloud --help` to see the Cloud Platform services you can interact with. And run `gcloud help COMMAND` to get help on any gcloud command. * Run `gcloud topic --help` to learn about advanced features of the SDK like arg files and output formatting * Run `gcloud cheat-sheet` to see a roster of go-to `gcloud` commands.  추가 설정을 수행하지 않고 액세스 승인  PS D:\\Git\\apigee\\myapigeeworkspace\u0026gt; gcloud auth login Your browser has been opened to visit: https://accounts.google.com/o/oauth2/auth?response_type=code\u0026amp;client_id=32555940559.apps.googleusercontent.com\u0026amp;redirect_uri=http%3A%2F%2Flocalhost%3A8085%2F\u0026amp;scope=openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth\u0026amp;state=8vekqoeRbLfEc9a1RMdtKuAGKoQsHk\u0026amp;access_type=offline\u0026amp;code_challenge=dKREWjk04tSgbIgnh-vIjtdZI8zYXXafijjRZ4h9OFg\u0026amp;code_challenge_method=S256 You are now logged in as [spcsenti2023@gmail.com]. Your current project is [pure-fold-339305]. You can change this setting by running: $ gcloud config set project PROJECT_ID   1. Apigee 조직에 새로운 dev 환경을 만들고 배포 유형으로 Archive를 사용 설정합니다.   Apigee 웹콘솔의 Admin - Environments - Overview 이동(우측 상단의 +Environment 선택)    이름 dev, 배포유형 Archive를 사용 설정    새 환경 추가    인스턴스 연결    dev를 체크하고 save를 선택한다.(몇분 정도 걸린다.)    연결 완료    2. 환경 그룹 연결  Groups에 기존 eval-group을 연결    3. Apigee 환경에 API 프록시 구성 아카이브 파일을 배포 # 터미널탭에서 myapigeeworkspace 디렉토리로 이동 $ cd myapigeeworkspace # 다음 명령을 실행 gcloud beta apigee archives deploy --environment=dev --labels=release=052021 # 실행 응답 Waiting for operation [0ef6eb0a-b5a6-41fb-9c86-13c1dc0a751c] to complete...done. 4. API 테스트 curl https://INTERNAL_LOAD_BALANCER_IP/helloworld / -H \u0026#34;Host: ENV_GROUP_HOSTNAME\u0026#34;  다음과 같은 오류 메시지를 확인할 수 있다.  $ curl https://spsenti2023.duckdns.org/helloworld -H \u0026#34;Host: pure-fold-339305-eval.apigee.net\u0026#34; {\u0026#34;fault\u0026#34;:{\u0026#34;faultstring\u0026#34;:\u0026#34;Failed to resolve API Key variable request.queryparam.apikey\u0026#34;,\u0026#34;detail\u0026#34;:{\u0026#34;errorcode\u0026#34;:\u0026#34;steps.oauth.v2.FailedToResolveAPIKey\u0026#34;}}} helloworld API를 포함하는 API 제품을 만든 후 API 제품을 사용해 개발자를 만들고 등록해야 API 키를 가져올 수 있다.\n5. API 키 가져오기   Publish - API Products 이동    CREATE를 선택    Name: myproduct Display name: myproduct Environment: dev Access: public Quota: 공란 Allowed OAuth scope: 공란  Operations 항목에서 Add an operation을 선택    - API 프록시 드롭다운 메뉴에서 helloworld 선택 - 경로 필드에 \u0026#34;/\u0026#34; 입력 - 다른 필드는 기본값 그대로 사용 - 저장을 눌러 API 제품을 저장   저장 완료    6. 개발자 추가  Publish - Developers로 이동하여 개발자를 등록한다.    7. 앱 등록   Publish -\u0026gt; Apps로 이동하여 +App을 눌러 추가    New App    Name: myapp Display name: myapp Developer name: hskim@hancom.com Callback URL: 공란 Notes: 공란 Expiry: Never Product: myproduct Custom attributes: 공란   추가 화면    API키를 복사한다.\n  Key: 8mE1cvb3NFcp9S5dkz1tuWxyCAVpX66nPcGpCAWDZvbNTjPm Secret: EYUeAtwGTky4XMOT2T0yI2tpXrZyNKFbWWyfU59ayOjP1ht591************** 8. curl 호출 확인 curl -v https://$PUBLIC_FACING_IP/helloworld?apikey=ZQA5euYtNeJ7ZCGCJMpvd6F2BZOmxOzY $ curl -v https://spsenti2023.duckdns.org/helloworld?apikey=8mE1cvb3NFcp9S5dkz1tuWxyCAVpX66nPcGpCAWDZvbNTjPm * Trying 34.117.255.14:443... * Connected to spsenti2023.duckdns.org (34.117.255.14) port 443 (#0) * schannel: disabled automatic use of client certificate * schannel: ALPN, offering http/1.1 * schannel: ALPN, server accepted to use http/1.1 \u0026gt; GET /helloworld?apikey=8mE1cvb3NFcp9S5dkz1tuWxyCAVpX66nPcGpCAWDZvbNTjPm HTTP/1.1 \u0026gt; Host: spsenti2023.duckdns.org \u0026gt; User-Agent: curl/7.79.1 \u0026gt; Accept: */* \u0026gt; * Mark bundle as not supporting multiuse \u0026lt; HTTP/1.1 200 OK \u0026lt; x-powered-by: Apigee \u0026lt; access-control-allow-origin: * \u0026lt; x-frame-options: ALLOW-FROM RESOURCE-URL \u0026lt; x-xss-protection: 1 \u0026lt; x-content-type-options: nosniff \u0026lt; content-type: application/json;charset=UTF-8 \u0026lt; content-length: 77 \u0026lt; etag: W/\u0026#34;8d-/7TqkgBKcDi8Ug3uWWUJpw\u0026#34; \u0026lt; date: Thu, 03 Mar 2022 06:44:20 GMT \u0026lt; alt-svc: clear \u0026lt; x-request-id: ca4e02c3-7ef5-4367-9d1d-48c3f5a8f896 \u0026lt; Via: 1.1 google, 1.1 google \u0026lt; Alt-Svc: h3=\u0026#34;:443\u0026#34;; ma=2592000,h3-29=\u0026#34;:443\u0026#34;; ma=2592000 \u0026lt; {\u0026#34;root\u0026#34;:{\u0026#34;city\u0026#34;:\u0026#34;San Jose\u0026#34;,\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;,\u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;,\u0026#34;state\u0026#34;:\u0026#34;CA\u0026#34;}}* Connection #0 to host spsenti2023.duckdns.org left intact  API archive가 Apigee 환경에 성공적으로 배포되었습니다.\n  2. 환경 그룹 curl -i -H \u0026#34;$AUTH\u0026#34; -H \u0026#34;Content-Type:application/json\u0026#34; \u0026#34;https://apigee.googleapis.com/v1/organizations/$PROJECT_ID/environments/dev\u0026#34; [인증 에러]\n$ curl -i -H \u0026#34;$AUTH\u0026#34; -H \u0026#34;Content-Type:application/json\u0026#34; \u0026#34;https://apigee.googleapis.com/v1/organizations/pure-fold-339305/environments/dev\u0026#34; HTTP/2 401 www-authenticate: Bearer realm=\u0026#34;https://accounts.google.com/\u0026#34; vary: X-Origin vary: Referer vary: Origin,Accept-Encoding content-type: application/json; charset=UTF-8 date: Thu, 24 Feb 2022 06:00:30 GMT server: ESF cache-control: private x-xss-protection: 0 x-frame-options: SAMEORIGIN x-content-type-options: nosniff alt-svc: h3=\u0026#34;:443\u0026#34;; ma=2592000,h3-29=\u0026#34;:443\u0026#34;; ma=2592000,h3-Q050=\u0026#34;:443\u0026#34;; ma=2592000,h3-Q046=\u0026#34;:443\u0026#34;; ma=2592000,h3-Q043=\u0026#34;:443\u0026#34;; ma=2592000,quic=\u0026#34;:443\u0026#34;; ma=2592000; v=\u0026#34;46,43\u0026#34; accept-ranges: none { \u0026#34;error\u0026#34;: { \u0026#34;code\u0026#34;: 401, \u0026#34;message\u0026#34;: \u0026#34;Request is missing required authentication credential. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project.\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;UNAUTHENTICATED\u0026#34;, \u0026#34;details\u0026#34;: [ { \u0026#34;@type\u0026#34;: \u0026#34;type.googleapis.com/google.rpc.ErrorInfo\u0026#34;, \u0026#34;reason\u0026#34;: \u0026#34;CREDENTIALS_MISSING\u0026#34;, \u0026#34;domain\u0026#34;: \u0026#34;googleapis.com\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;apigee.googleapis.com\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;google.cloud.apigee.v1.EnvironmentService.GetEnvironment\u0026#34; } } ] } } 오류확인\n 액세스 토큰 확인\n $ gcloud auth application-default print-access-token ya29.A0ARrdaM8TiVeqbSujEaiw59ZtMo0N-jgOxWEO5SZoRFpB4BweBlak6C35aKe9BrBgM4E5kKfIOmY2kwZFJDgukeVA52AjKUhRuGfpHafj2iH46PBEAaBZwijK5erBG94VgIO1Qgb1R************************** curl -s -H \u0026#34;Content-Type: application/json\u0026#34; -H \u0026#34;Authorization: Bearer \u0026#34;$(gcloud auth application-default print-access-token) https://apigee.googleapis.com/v1/organizations/pure-fold-339305/environments/dev -d @sync-request.json Google Developers\n"
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial9/",
	"title": "Tutorial9 : ArgoCD를 이용한 배포",
	"tags": [],
	"description": "",
	"content": "ArgoCD App 배포하기 1. image registry 주소 변경   GitOps Repo\n  아래 2개의 yaml파일을 편집해 이미지 경로를 본인 dockerhub의 계정과 리파지터리로 변경한다.\n\u0026ndash; base/deployment-sample.yaml\n\u0026ndash; okd-deploy/testblog-deployment.yaml\n  image: docker.io/spcsenti/testblog:latest \u0026ndash;\u0026gt; image: docker.io/spcsenti2023/okdtutorial:latest\n  2. New App 선택 [GENERAL]\nApplication Name : okd-tutorial\nProject : default\n\u0026hellip;\n[SOURCE]\nRepository URL : https://github.com/blackwhale-testuser/okd-tutorial1-gitops\nRevision : HEAD\nPath : okd-deploy\n\u0026hellip;\n[DESTINATION]\nCluster URL : https://kubernetes.default.svc\nNamespace : okd-tutorial\n\u0026hellip;\n\r 2.1 Out of Sync일 경우에는 SYNC 버튼을 눌러 Synchronize를 수행한다.  2.2 Topology를 확인한다. blog-frontend가 배포되었는지 확인  2.3 OpenURL을 눌러 확인한다.  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial10/",
	"title": "Tutorial10 : GitHub Webhook 추가",
	"tags": [],
	"description": "",
	"content": "CI/CD 1. GitHub Source Repository에 Webhook 추가  Source Repositoy  1.1 Settings -\u0026gt; Webhooks 이동후 Add Webhook 선택  1.2 jenkins 주소를 확인후 payload url에 입력  Payload URL : https://jenkins-okd-tutorial.apps.blackwhale.cloud.hancom.com/github-webhook/\nContent type : application/json\nTrigger : Juste the push event\n\r1.3 소스 수정후 commit \rJenkinsfile의 태그를 업데이트 해야 GitOps Repo로 Commit 할 수 있다.\nsed -i \u0026rsquo;s/MY_BUILD_TAG/$BUILD_NUMBER/\u0026rsquo; testblog-deployment.yaml\nBUILD_NUMBER가 정상적으로 셋팅되는지 확인\n\r 1.4 Jenkins 빌드가 자동으로 동작하는지 확인  2. ArgoCD Auto-Sync \rApplications -\u0026gt; \u0026ldquo;Your Application\u0026rdquo; 이동후 App Details 선택\nSYNC-POLICY : Enable Auto-Sync 선택\n\r "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial11/",
	"title": "Tutorial11 : 문제 해결",
	"tags": [],
	"description": "",
	"content": "문제 해결 1. OKD BuildConfig 빌드 확인  okd -\u0026gt; Developer -\u0026gt; Builds 생성한 BuildConfig를 선택해 Builds 탭으로 이동하면 빌드 히스토리를 확인할 수 있다.\n   2. 새로 배포한 버전이 이전 이미지를 참고하는 문제 Deployment의 imagePullPolicy를 Always로 주었음에도 이미지 갱신이 되지 않는 경우가 발생한다.\n저장소의 이미지와 로컬에 있는 이미지가 동일한 경우 이런 문제가 발생한다. Tag와 Digest 값이 동일한지 확인해본다.\n\r\u0026lt;before\u0026gt; spcsenti2023/okdtutorial:latest DIGEST:sha256:7521223d8a7c54a6c9e5a40b4f4866f4394eefb3494c5de8f47fbf4e536c40e9 \u0026lt;current\u0026gt; spcsenti2023/okdtutorial:latest DIGEST:sha256:14480c323c64dd065fa0b71067226ab8995c5f2660a8e7d747795ebc2647e1b8 3. BuildConfig에서 빌드 번호 자동 업데이트 가능할까?  stackoverflow  [Asked] I am doing CI/CD using openshift buildconfig. I am able to fetch the source code from git and successfully build the docker image and push to internal registry. I want to tag the image built with with build numbers based on Openshift Build config output labels are annotations. How to do that in the YAML, I am using docker build strategy. output: to: kind: DockerImage name: \u0026#39;internal.registry.com/app_name/sample_app:\u0026lt;BUILD_NUMBER/NAME\u0026gt;\u0026#39; Also once this is done, i want to update the image in deployment to get new version of app. Have anyone done such setup, Can anyone help me on this. [Answer] The yaml file is resolved when the buildConfig is created, it can\u0026#39;t have references to environment variables or build number information. If you are doing this from a CI/CD pipeline, you could create a different buildConfig in the same CI/CD pipeline, run it, and delete it. But you may have permissions issue to create the buildConfig every time. Another option I would prefer is to use ImageStreams. With ImageStream a single object keeps track of all versions of the image via sha codes, therefore there is no need to update the yaml every time. 4. https 지원 [service.yaml] .... ports: - name: http protocol: TCP port: 80 targetPort: 8080 - name: https protocol: TCP port: 443 targetPort: 8080 .... [route.yaml] spec: .... port: targetPort: https .... "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial12/",
	"title": "Tutorial12 : Private Repo 연동방법",
	"tags": [],
	"description": "",
	"content": "Private Repository 연동 1. SSH 키 생성  Git Bash 실행 사용자 폴더로 이동후 .ssh 폴더 생성 및 이동 ssh-keygen 실행  1.1 ssh-keygen 사용시 기본값(SHA-1)은 github에서 더 이상 인증 용도로 사용할 수 없다. Update : 2022-01-11\nNovember 16, 2021\tThe ECDSA and Ed25519 host keys will start to be fully usable. GitHub’s DSA host key will no longer be supported. Unable to connect SSH repository: unknown error: ERROR: You\u0026rsquo;re using an RSA key with SHA-1, which is no longer allowed. Please use a newer client or a different key type.\nhttps://github.blog/2021-09-01-improving-git-protocol-security-github/\n-\u0026gt; Removing support for all DSA keys\n-\u0026gt; Adding requirements for newly added RSA keys\n-\u0026gt; Removing some legacy SSH algorithms (HMAC-SHA-1 and CBC ciphers)\n-\u0026gt; Adding ECDSA and Ed25519 host keys for SSH\nTurning off the unencrypted Git protocol\n\rgithub 지원 타입 \u0026#39;ssh-rsa\u0026#39;, \u0026#39;ecdsa-sha2-nistp256\u0026#39;, \u0026#39;ecdsa-sha2-nistp384\u0026#39;, \u0026#39;ecdsa-sha2-nistp521\u0026#39;, \u0026#39;ssh-ed25519\u0026#39;, \u0026#39;sk-ecdsa-sha2-nistp256@openssh.com\u0026#39;, \u0026#39;sk-ssh-ed25519@openssh.com\u0026#39;. 아래 타입으로 생성 ssh-keygen -t ecdsa-sha2-nistp521 $ ssh-keygen -t ecdsa-sha2-nistp521 Generating public/private ecdsa-sha2-nistp521 key pair. Enter file in which to save the key (/c/Users/owner/.ssh/id_ecdsa): blackwhale-testuser-nistp521-id Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in blackwhale-testuser-nistp521-id. Your public key has been saved in blackwhale-testuser-nistp521-id.pub. The key fingerprint is: SHA256:XwWVH/MoeDVvW6UGGUru6gGnPMoHv7bRU+cvKNs68BY owner@DESKTOP-2M4EABD The key\u0026#39;s randomart image is: +---[ECDSA 521]---+ | . o+.. | | o .o.+o.| | o. o.*=| | .. o.+ *| | . S o.oo .o| | ...=E+ + . | | o=o=.... | | . .++=+. .. | | ooo++=. .. | +----[SHA256]-----+   2. Github Private Repository 설정 2.1 User profile에서 Settings 이동  2.2 SSH and GPG Keys 설정으로 이동  2.3 New SSH key 선택후 생성한 testuser_id.pub 파일을 메모장으로 열어 모두 복사후 붙여넣기  3. Repository Clone 방법   \u0026ldquo;사용자 폴더\u0026rdquo;/.ssh/config 파일을 만든다.    생성한 키를 아래 형식으로 추가한다.\n  Host testuser_github Hostname github.com User git IdentityFile=C:\\Users\\owner\\.ssh\\testuser_id  git clone  git clone testuser_github:blackwhale-testuser/privatetutorial.git [output]\nC:\\Work2021\\spcsenti2023\u0026gt;git clone testuser_github:blackwhale-testuser/privatetutorial.git Cloning into \u0026#39;privatetutorial\u0026#39;... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (3/3), done. 4. Jenkins Private Repository 설정 방법  Deploy Key 생성  SSH 키 생성\nGit Bash 실행\n사용자 폴더로 이동후 .ssh 폴더 생성 및 이동\nssh-keygen 실행\n\r4.1 ssh key 생성   4.2 GitHub private repository로 이동하여, Settings의 Deploy Keys를 선택한다.  4.3 생성한 Public Key를 메모장으로 열어 모두 복사후 붙여 넣는다.  5. Jenkins 설정  Jenkins → Jenkins 관리 → Manage Credentials 이동 (global) 도메인 선택     Add Credentials 선택\n  Kind를 SSH Username with private key 선택\n  ID와 Username을 입력\n  Privte Key에서 Enter directly를 선택후 Add를 눌러 생성한 Private Key를 메모장으로 열어 모두 복사후 붙여넣는다.    파이프라인 생성과정은 동일\n  GitHub Repository에서 SSH Clone 주소를 확인한다.\n  git@github.com:blackwhale-testuser/privatetutorial.git\n   \rPipeline 설정에서 Repository URL을 위에서 확인한 주소로 넣는다.\nCredentials에서 본인이 생성한 Credential을 선택한다.\n\r 6. ArgoCD Private Repository 설정 방법 6.1 ArgoCD 이동후 Settings → Repositories 이동    CONNECT REPO USING SSH 선택\n  로컬에서 생성한 Private Key를 메모장으로 열어 모두 복사후 SSH private key data에 붙여 넣는다.\n  Skip server verification 체크\n  Enable LFS support(Git only) 체크\n  Connect를 누른다.\n  Connection Status가 Successful인지 확인    GitHub Private repository SSH 주소를 확인한다.\n  git@github.com:blackwhale-testuser/privatetutorial.git    App 생성시 Source의 Repository URL에 ssh 주소를 입력한다.    "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial13/",
	"title": "Tutorial13 : BuildConfig 사용 예",
	"tags": [],
	"description": "",
	"content": "orca-harbor + buildconfig 1. image pull secret 추가 Secret name : orca-harbor-secret\nRegistry server address : orca-harbor.cloud.hancom.com\nUsername : \u0026ldquo;이름\u0026rdquo;\nPassword : harbor 접속후 CLI secret 확인\n\r 2. User Profile을 눌러 CLI secret 복사후 사용  3. BuildConfig 사용 예제1 apiVersion: build.openshift.io/v1 kind: BuildConfig metadata:  name: testblog  namespace: okd-tutorial  labels:  app.kubernetes.io/name: testblog spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: \u0026#39;image 경로\u0026#39;  pushSecret:  name: \u0026#39;orca-harbor-secret\u0026#39;  source:  git:  ref: master  uri: \u0026#39;https://github.com/bluewhale-users/okd-tutorial1-src.git\u0026#39;  type: Git  strategy:  type: Docker  dockerStrategy:  dockerfilePath: Dockerfile  triggers:  - type: ImageChange  imageChange: {}  - type: ConfigChange 4. BuildConfig 사용 예제2 apiVersion: build.openshift.io/v1 kind: BuildConfig metadata:  name: standardterm  namespace: okd-externaladdin  labels:  app.kubernetes.io/name: standardterm spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: \u0026#39;image 경로\u0026#39;  pushSecret:  name: \u0026#39;orca-harbor-usetoken\u0026#39;  type: Git  strategy:  type: Docker  dockerStrategy:  dockerfilePath: Dockerfile  postCommit: {}  source:  type: Binary  binary: {}  runPolicy: Serial  triggers:  - type: ImageChange  imageChange: {}  - type: ConfigChange "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/web-console/",
	"title": "Web Console",
	"tags": [],
	"description": "",
	"content": "Tutorial1 : Overview Tutorial2 : 프로젝트 만들기 Tutorial2 : 프로젝트 삭제 Tutorial2 : Add From Git Tutorial2 : Add From Container "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cli/",
	"title": "CLI",
	"tags": [],
	"description": "",
	"content": "CLI1 : oc 설정 CLI2 : Basic Commands "
},
{
	"uri": "https://bluewhale-users.github.io/ko/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "OKD  okd.io OKD github OKD 공식문서  OKD는 지속적인 애플리케이션 개발 및 멀티 테넌트 배포에 최적화된 Kubernetes 배포판입니다.\nOKD는 Redhat Openshift1의 오픈소스 버전입니다.\n(최신 OKD 버전 : 4.10.0-0.okd-2022-03-07-131213)\n튜토리얼들은 OKD 사용방법을 이해하는데 도움을 주기 위해 작성되었습니다.\n사용된 예제들은 4.8.0 버전에서 테스트되었습니다.\nContents  OKD Tutorial  CLI CI/CD      OpenShift는 Red Hat에서 개발한 클라우드 개발 PaaS(Platform as a Service)입니다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/",
	"title": "Apigees",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/apigee/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": "apigee1 : 소개 apigee2 : 무료로 사용해보기 apigee3 : API Reverse Proxy apigee4 : 개발자포털1 apigee5 : 개발자포털2 apigee6 : 개발자포털3 apigee7 : API Proxies Demo apigee8 : VS Code 사용 apigee9 : 배포하기 "
},
{
	"uri": "https://bluewhale-users.github.io/ko/post/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/post/test/",
	"title": "Test",
	"tags": [],
	"description": "",
	"content": "테스트입니다.\n"
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/",
	"title": "CI/CD 튜토리얼",
	"tags": [],
	"description": "",
	"content": "CI/CD Tutorial1 : 준비 CI/CD Tutorial2 : 레파지토리 생성 CI/CD Tutorial3 : DockerHub 설정 CI/CD Tutorial4 : Jenkins 설정 CI/CD Tutorial5 : Jenkins Pipeline 구성 CI/CD Tutorial6 : Buildconfig 설정 CI/CD Tutorial7 : 테스트 빌드 CI/CD Tutorial8 : ArgoCD 설정 CI/CD Tutorial9 : ArgoCD를 이용한 배포 CI/CD Tutorial10 : GitHub Webhook 추가 CI/CD Tutorial11 : 문제 해결 CI/CD Tutorial12 : Private 레파지토리 연동방법 CI/CD Tutorial13 : Buildconifg 사용 예 "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/",
	"title": "Hugo 사용법",
	"tags": [],
	"description": "",
	"content": "Hugo1 : Hugo 소개 Hugo2 : 사이트 구축 Hugo3 : 테마 수정 및 변경 Hugo4 : css 스타일 참조 "
},
{
	"uri": "https://bluewhale-users.github.io/ko/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
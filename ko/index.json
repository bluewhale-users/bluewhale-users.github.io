[
{
	"uri": "https://bluewhale-users.github.io/ko/okd/",
	"title": "한컴 클라우드 플랫폼",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo1/",
	"title": "Hugo1 : Hugo 소개",
	"tags": [],
	"description": "",
	"content": "1. Hugo  gohugo.io hugo github shortcodes  휴고(Hugo)는 Go로 작성된 정적 사이트1 생성기입니다. 웹페이지 접속시 실시간으로 페이지를 생성하는 동적사이트2와 달리 휴고는 컨텐츠를 만들거나 업데이트시 페이지를 생성합니다. 따라서 휴고로 구축된 웹사이트는 일반적으로 더 빠르고 안전합니다.\n장점\n 빌드 시간이 매우 빠르다. 다양한 OS에서 쉽게 설치하여 개발할 수 있다. LiveReload 기능을 제공해 변경사항을 즉시 렌더링해 확인할 수 있다. 다양한 테마가 존재한다. 정적 사이트를 렌더링하므로 제한없이 모든곳에서 호스팅할 수 있다.    static site는 고정된 html을 그냥 뿌려주는 사이트이다. 따라서 static site를 쓴다면 언제 들어간다고 해도 항상 같은 화면만 나온다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Dynamic site 그때그때 동적으로 html을 생성해서 보여주는 사이트다. 즉, dynamic site의 화면은 같은 주소라도 지속적으로 변할 수 있다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial1/",
	"title": "Tutorial1 : 준비",
	"tags": [],
	"description": "",
	"content": "1. OKD CI/CD 소개  CI/CD Flow with Argo CD   [출처] https://www.gspann.com/resources/blogs/continuous-delivery-for-kubernetes-with-gitops-and-argo-cd/\n\u0026lsquo;GitOps\u0026rsquo;는 형상 관리 도구인 \u0026lsquo;Git\u0026rsquo; 을 통해 개발자에게 익숙한 방식으로 인프라 또는 어플리케이션의 선언적인 설정파일을 관리하고 배포하는 일련의 프로세스를 말합니다. 이 튜토리얼은 어플리케이션 소스를 담고있는 Source Repository와 OKD에 배포를 위한 설정(manifest files)들을 담고 있는 GitOps Repository 2개의 리파지토리가 필요합니다.\n\r2. OKD CI/CD 프로세스  Source Repo에 변경사항을 Commit 한다. Jenkins에서 변경사항을 감지하고 빌드를 수행한다. Docker Image를 dockerhub에 Push한다. GitOps Repo의 deployment manifest파일을 업데이트(tag version)한다. ArgoCD가 변경사항을 감지하고 자동 배포 수행한다.  3. 사전 준비  GitHub repository Deploy Key dockerhub 계정 및 Repositiry okd 계정  4. 일회성 인스턴스 사용하는 이유 프로젝트용 일회성 Jenkins와 ArgoCD 인스턴스를 사용하는 이유는 다음과 같습니다.\n 다중 사용자의 경우 관리하기 어렵다. 여러 플러그인 설치로 인해 충돌 가능성이 높다.  5. URL References  GitHub Source GitHub Gitops DockerHub  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/",
	"title": "Hugo",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo2/",
	"title": "Hugo2 : 사이트 구축",
	"tags": [],
	"description": "",
	"content": "1. Hugo 설치  Hugo Quick-Start  1.1 hugo 설치(windows 기준 설명)  Hugo Download hugo release에서 최신버전을 다운로드 C:\\Hugo\\bin\\에 압축 해제 환경변수에 경로 추가  window + Q로 검색창을 연 뒤 환경 변수를 검색해서 환경 변수 선택 시스템변수의 Path를 더블클릭한다. 새로 만들기를 클릭한 다음 아까 압축을 풀었던 곳인 C:\\Hugo\\bin를 등록   command에서 hugo version을 쳐서 확인  windows\rMacOS\r\rC:\\Users\\user\u0026gt;hugo version hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio \r\rbrew install hugo # or port install hugo \r\r\r\r1.2 Hugo 프로젝트 만들기  hugo new site \u0026lt;프로젝트 이름\u0026gt;  $hugo new site bluewhale-hugo Congratulations! Your new Hugo site is created in D:\\Git\\bluewhale\\bluewhale-hugo. Just a few more steps and you\u0026#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026#34;hugo new theme \u0026lt;THEMENAME\u0026gt;\u0026#34; command. 2. Perhaps you want to add some content. You can add single files with \u0026#34;hugo new \u0026lt;SECTIONNAME\u0026gt;\\\u0026lt;FILENAME\u0026gt;.\u0026lt;FORMAT\u0026gt;\u0026#34;. 3. Start the built-in live server via \u0026#34;hugo server\u0026#34;. Visit https://gohugo.io/ for quickstart guide and full documentation.  Directory 구조  C:\\bluewhale-hugo ├─archetypes ├─content ├─data ├─layouts ├─static └─themes 2. 테마 추가 2.1 Hugo theme 다운로드  hugo theme techdoc theme : MIT  windows\r\r$ cd bluewhale-hugo $ git submodule add https://github.com/thingsym/hugo-theme-techdoc.git themes/hugo-theme-techdoc $ git submodule update --remote $ git add themes/hugo-theme-techdoc \r\r\r\r2.2 미리보기 windows\r\rhugo server -D # -D draft 문서도 보여준다. \r\r\r\r$ hugo server -D port 1313 already in use, attempting to use an available port Start building sites … hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio | EN -------------------+----- Pages | 14 Paginator pages | 0 Non-page files | 0 Static files | 5 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Built in 64 ms Watching for changes in D:\\Git\\bluewhale\\bluewhale-hugo\\{archetypes,content,data,layouts,static,themes} Watching for config changes in D:\\Git\\bluewhale\\bluewhale-hugo\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:8868/ (bind address 127.0.0.1) Press Ctrl+C to stop 2.3 빌드 windows\r\r# hugo -t \u0026lt;테마이름\u0026gt; hugo server -t hugo-theme-techdoc # 출력위치 지정 # hugo -t hugo-theme-techdoc -d public_html \r\r\r\r$ hugo server -t hugo-theme-techdoc Start building sites … hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio | EN -------------------+----- Pages | 7 Paginator pages | 0 Non-page files | 0 Static files | 5 Processed images | 0 Aliases | 0 Sitemaps | 1 Cleaned | 0 Built in 87 ms Watching for changes in D:\\Git\\bluewhale\\bluewhale-hugo\\{archetypes,content,data,layouts,static,themes} Watching for config changes in D:\\Git\\bluewhale\\bluewhale-hugo\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop   public 폴더에 추가됨\n   http://localhost:1313 접속 화면    2.4 새 글 추가 $ hugo new post/test.md Content \u0026#34;D:\\\\Git\\\\bluewhale\\\\bluewhale-hugo\\\\content\\\\post\\\\test.md\u0026#34; created 3. 리파지토리 생성 2개의 리파지토리를 생성한다.\n 전체 컨텐츠를 저장할 곳 빌드 결과로 github page를 띄울 곳  첫번째 repository는 \u0026lt;프로젝트 이름\u0026gt; 두번째 repository는 #USER-ID.github.io로 만들면 된다.\n bluewhale-hugo bluewhale.github.io  3.1 git remote 설정 $ cd bluewhale-hugo $ git init $ git remote add origin https://github.com/bluewhale-users/bluewhale-hugo 3.2 github page 리파지토리 연결(bluewhale.github.io) $ git submodule add -b master https://github.com/bluewhale-users/bluewhale.github.io.git public $ git submodule add -b master https://github.com/bluewhale-users/bluewhale.github.io.git public Cloning into \u0026#39;D:/Git/bluewhale/bluewhale-hugo/public\u0026#39;... remote: Enumerating objects: 4, done. remote: Counting objects: 100% (4/4), done. remote: Compressing objects: 100% (3/3), done. remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 Unpacking objects: 100% (4/4), done. warning: LF will be replaced by CRLF in .gitmodules. The file will have its original line endings in your working directory 3.3 commit/push $ git commit $ git push \rpull 실행시 아래와 같은 에러가 나온다면 히스토리를 리셋한다.\n\r\u0026gt; git pull --tags origin master From https://github.com/bluewhale-users/bluewhale-hugo * branch master -\u0026gt; FETCH_HEAD fatal: refusing to merge unrelated histories # git pull origin 브런치명 --allow-unrelated-histories git pull origin master --allow-unrelated-histories "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial2/",
	"title": "Tutorial2 : 리파지토리 생성",
	"tags": [],
	"description": "",
	"content": "GitHub Repository 준비 origin repository  src gitops  1. 2개 리파지토리를 본인 계정으로 fork   src fork repo gitops fork repo  2. Deploy Key 생성 및 등록 jenkins 빌드후 gitops 리파지토리에 commit을 수행하기 위해 deploy key를 등록합니다.\n2.1 Gitbash를 실행하여 ssh-keygen을 통해 deploy key를 생성 user@DESKTOP-1RAT70A MINGW64 ~/.ssh $ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/c/Users/user/.ssh/id_rsa): okd-tutorial-deploykey Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in okd-tutorial-deploykey. Your public key has been saved in okd-tutorial-deploykey.pub. The key fingerprint is: SHA256:AnFXcqY8jKZ9T3XTp12eh5cJd7ofMmRYMOml5gFZjao user@DESKTOP-1RAT70A The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | . . o.*++ | | o = B ooo . | | . o = + +oo.=| | = o *o.oBB| | . o S +..o++=| | E o .o o.| | . o.. | | o..| | .| +----[SHA256]-----+ 3. GitOps Repo 이동  3.1 Settings -\u0026gt; Deploy keys로 이동해 Add deploy key 선택(Allow write access 체크)   4. Source Repo 이동 4.1 Jenkins 파일 편집 ...... stage(\u0026#34;Update Tag\u0026#34;) {  steps {  checkout([$class: \u0026#39;GitSCM\u0026#39;,  branches: [[name: \u0026#39;*/master\u0026#39; ]],  extensions: scm.extensions,  userRemoteConfigs: [[ - url: \u0026#39;fork한 repo url\u0026#39;, + url: \u0026#39;git@github.com:blackwhale-testuser/okd-tutorial1-gitops.git\u0026#39;,  credentialsId: \u0026#39;jenkins-ssh-private\u0026#39;,  ]]  ])  sshagent(credentials: [\u0026#39;jenkins-ssh-private\u0026#39;]){  sh(\u0026#34;\u0026#34;\u0026#34;  #!/usr/bin/env bash  set +x  export GIT_SSH_COMMAND=\u0026#34;ssh -oStrictHostKeyChecking=no\u0026#34;  git config --global user.email \u0026#34;test@gmail.com\u0026#34;  git checkout master  cp --f base/deployment-sample.yaml okd-deploy/temp.yaml  cd okd-deploy  sed -i \u0026#39;s/MY_BUILD_TAG/test.4/\u0026#39; temp.yaml  cat temp.yaml  cp --f temp.yaml testblog-deployment.yaml  git commit -a -m \u0026#34;updated the image tag\u0026#34;  git push  \u0026#34;\u0026#34;\u0026#34;)  }  } } ...... "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo3/",
	"title": "Hugo3 : 테마 수정 및 변경",
	"tags": [],
	"description": "",
	"content": "1. Theme Overriding 테마 수정시 \u0026rsquo;themes\u0026rsquo; 디렉토리의 내용은 수정하지 않는다. 테마구조를 살펴보면 원본 프로젝트 구조와 유사한 것을 확인할 수 있다. (archetypes, layouts, static, \u0026hellip;), 즉 테마도 hugo 프로젝트이다.\n테마 프로젝트의 layouts 파일들을 원본 프로젝트 layouts 폴더에 복사하여 이를 수정함으로써 테마를 오버라이딩하여 사용할 수 있다.\n \\layouts\\partials\\header.html이 존재하면 \\layouts\\partials\\header.html을 적용한다. 존재하지 않으면 \\themes\u0026lt;테마 이름\u0026gt;\\layouts\\partials\\header.html을 적용한다  2. 아래 링크를 참고하여 테마를 수정해 보자.  hugo-theme-techdoc exampleSite  config.toml\r\rbaseURL = \u0026#39;https://bluewhale-users.github.io/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;Bluewhale Tutorial Site\u0026#39; theme = \u0026#34;hugo-theme-techdoc\u0026#34;  hasCJKLanguage = true metaDataFormat = \u0026#34;yaml\u0026#34;  defaultContentLanguage = \u0026#34;en\u0026#34; defaultContentLanguageInSubdir= false enableMissingTranslationPlaceholders = false  [params]   # Source Code repository section  description = \u0026#34;put your description\u0026#34;  github_repository = \u0026#34;https://github.com/thingsym/hugo-theme-techdoc\u0026#34;  version = \u0026#34;0.9.7\u0026#34;   # Documentation repository section  # documentation repository (set edit link to documentation repository)  github_doc_repository = \u0026#34;https://github.com/thingsym/hugo-theme-techdoc\u0026#34;  github_doc_repository_path = \u0026#34;\u0026#34;   # Analytic section  google_analytics_id = \u0026#34;\u0026#34; # Your Google Analytics tracking id  tag_manager_container_id = \u0026#34;\u0026#34; # Your Google Tag Manager container id  google_site_verification = \u0026#34;\u0026#34; # Your Google Site Verification for Search Console   # Open Graph and Twitter Cards settings section  # Open Graph settings for each page are set on the front matter.  # See https://gohugo.io/templates/internal/#open-graph  # See https://gohugo.io/templates/internal/#twitter-cards  title = \u0026#34;Hugo Techdoc Theme\u0026#34;  images = [\u0026#34;images/og-image.png\u0026#34;] # Open graph images are placed in `static/images`   # Theme settings section  # Theme color  # See color value reference https://developer.mozilla.org/en-US/docs/Web/CSS/color  custom_font_color = \u0026#34;\u0026#34;  custom_background_color = \u0026#34;\u0026#34;   # Documentation Menu section  # Menu style settings  menu_style = \u0026#34;slide-menu\u0026#34; # \u0026#34;open-menu\u0026#34; or \u0026#34;slide-menu\u0026#34; or \u0026#34;\u0026#34; blank is as no sidebar   # Date format  dateformat = \u0026#34;\u0026#34; # default \u0026#34;2 Jan 2006\u0026#34;  # See the format reference https://gohugo.io/functions/format/#hugo-date-and-time-templating-reference   # path name excluded from documentation menu  menu_exclusion = [  \u0026#34;archives\u0026#34;,  \u0026#34;archive\u0026#34;,  \u0026#34;blog\u0026#34;,  \u0026#34;entry\u0026#34;,  \u0026#34;post\u0026#34;,  \u0026#34;posts\u0026#34;,  ]   # Algolia site search section  # See https://www.algolia.com/doc/  algolia_search_enable = true  algolia_indexName = \u0026#34;hugo-demo-techdoc\u0026#34;  algolia_appId = \u0026#34;7W4SAN4PLK\u0026#34;  algolia_apiKey = \u0026#34;cbf12a63ff72d9c5dc0c10c195cf9128\u0026#34; # Search-Only API Key  # Global menu section # See https://gohugo.io/content-management/menus/ [menu]  [[menu.main]]  name = \u0026#34;Home\u0026#34;  url = \u0026#34;/\u0026#34;  weight = 1   [[menu.main]]  name = \u0026#34;Blackwhale(OKD)\u0026#34;  url = \u0026#34;https://console-openshift-console.apps.blackwhale.cloud.hancom.com/\u0026#34;  weight = 2  # Markup configure section # See https://gohugo.io/getting-started/configuration-markup/ [markup]  defaultMarkdownHandler = \u0026#34;goldmark\u0026#34;  [markup.goldmark.renderer]  unsafe= true  [markup.tableOfContents]  startLevel = 2  endLevel = 6  ordered = false  [outputs]  home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;Algolia\u0026#34;]  # Algolia Search configure section [outputFormats.Algolia]  baseName = \u0026#34;algolia\u0026#34;  mediaType = \u0026#34;application/json\u0026#34;  isPlainText = true  notAlternative = true  [params.algolia]  vars = [  \u0026#34;title\u0026#34;,  \u0026#34;summary\u0026#34;,  \u0026#34;content\u0026#34;,  \u0026#34;date\u0026#34;,  \u0026#34;publishdate\u0026#34;,  \u0026#34;description\u0026#34;,  \u0026#34;permalink\u0026#34;,  \u0026#34;keywords\u0026#34;,  \u0026#34;lastmod\u0026#34;,  ]  params = [  \u0026#34;tags\u0026#34;,  \u0026#34;categories\u0026#34;,  ] \r\r\r\r3. exmaplesite 확인  theme에 포함된 샘플사이트를 확인할수 있다.  $ cd themes\\hugo-theme-techdoc\\exampleSite $ hugo server --themesDir ../.. port 1313 already in use, attempting to use an available port Start building sites … hugo v0.94.0-63B23660 windows/amd64 BuildDate=2022-03-10T09:46:36Z VendorInfo=gohugoio WARN 2022/03/14 11:51:59 The \u0026#34;tweet\u0026#34; shortcode will soon require two named parameters: user and id. See \u0026#34;D:\\Git\\bluewhale\\bluewhale-hugo\\themes\\hugo-theme-techdoc\\exampleSite\\content\\sample\\build-in-shortcodes.md:35:1\u0026#34; | EN -------------------+------ Pages | 100 Paginator pages | 0 Non-page files | 0 Static files | 7 Processed images | 0 Aliases | 1 Sitemaps | 1 Cleaned | 0 Built in 683 ms Watching for changes in D:\\Git\\bluewhale\\bluewhale-hugo\\themes\\hugo-theme-techdoc\\{archetypes,exampleSite,layouts,package.json,static} Watching for config changes in D:\\Git\\bluewhale\\bluewhale-hugo\\themes\\hugo-theme-techdoc\\exampleSite\\config.toml Environment: \u0026#34;development\u0026#34; Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:2627/ (bind address 127.0.0.1) Press Ctrl+C to stop 테마 변경  learn theme learn 테마 참고1 learn 테마 참고2 learn 테마 folk repo  1. 기존 테마 제거 // 모듈 제거 순서 $ git submodule deinit -f themes/hugo-theme-techdoc $ rm -rf .git/modules/themes/hugo-theme-techdoc $ git rm -f themes/hugo-theme-techdoc $ git submodule deinit -f themes/hugo-theme-techdoc Cleared directory \u0026#39;themes/hugo-theme-techdoc\u0026#39; Submodule \u0026#39;themes/hugo-theme-techdoc\u0026#39; (https://github.com/thingsym/hugo-theme-techdoc.git) unregistered for path \u0026#39;themes/hugo-theme-techdoc\u0026#39; user@DESKTOP-1RAT70A MINGW64 /d/Git/bluewhale/bluewhale-hugo (master) $ rm -rf .git/modules/themes/hugo-theme-techdoc user@DESKTOP-1RAT70A MINGW64 /d/Git/bluewhale/bluewhale-hugo (master) $ git rm -f themes/hugo-theme-techdoc warning: LF will be replaced by CRLF in .gitmodules. The file will have its original line endings in your working directory rm \u0026#39;themes/hugo-theme-techdoc\u0026#39; 2. 새로운 테마 설치 $ cd themes/ $ git clone https://github.com/matcornic/hugo-theme-learn.git  테마 exampleSite 확인  $ cd themes\\hugo-theme-learn\\exampleSite $ hugo server --themesDir ../.. 3. 빌드 $ hugo -t hugo-theme-learn 4. 오류 PS D:\\Git\\bluewhale\\bluewhale-hugo\u0026gt; git submodule add -b master https://github.com/bluewhale-users/bluewhale.github.io.git public --force A git directory for \u0026#39;public\u0026#39; is found locally with remote(s): origin https://github.com/bluewhale-users/bluewhale.github.io.git If you want to reuse this local git directory instead of cloning again from https://github.com/bluewhale-users/bluewhale.github.io.git use the \u0026#39;--force\u0026#39; option. If the local git directory is not the correct repo or you are unsure what this means choose another name with the \u0026#39;--name\u0026#39; option. .git/modules/ 폴더 삭제 5. front matter spec\n"
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial3/",
	"title": "Tutorial3 : DockerHub 설정",
	"tags": [],
	"description": "",
	"content": "DockerHub 설정 1. docker hub에 계정 생성  dockerhub link   2.리파지토리를 생성 name : okdtutorial visibility : public   [생성화면]   "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/hugo4/",
	"title": "Hugo4 : css 스타일 참조",
	"tags": [],
	"description": "",
	"content": "css 파일 추가 1. config.toml 파일 수정 [params] ... custom_css = [\u0026#34;css/custom.css\u0026#34;] ... 2. css 파일 추가 static/css/custom.css 파일 추가  custom.css  img[src$=\u0026#39;#floatleft\u0026#39;] { float:left; } img[src$=\u0026#39;#floatright\u0026#39;] { float:right; } figure.floatright { max-width: 30%; width: auto\\9*0.3; /* ie8 */ height: auto; float: right; } figure.floatleft { max-width: 30%; width: auto\\9*0.3; /* ie8 */ height: auto; float: left; } 3. layouts/partials/header.html 수정 .... {{ range .Site.Params.custom_css -}} ... \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; {{- end }} .... 3. css 스타일 참조(그림 정렬) 기본 정렬\r왼쪽 정렬\r\r\u0026lt;figure\u0026gt;\u0026lt;img src=\u0026#34;/cicd/tutorial4_4.jpg\u0026#34;/\u0026gt; \u0026lt;/figure\u0026gt; \r\r\u0026lt;figure\u0026gt;\u0026lt;img src=\u0026#34;/cicd/tutorial4_4.jpg#floatleft\u0026#34;/\u0026gt; \u0026lt;/figure\u0026gt; \r\r\r\r  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial4/",
	"title": "Tutorial4 : Jenkins 설정",
	"tags": [],
	"description": "",
	"content": "Jenkins 설치 1. OKD에 로그인  okd link  [접속 화면]     2. Project 만들기   [프로젝트 생성 화면]   3. 역할 전환(developer) 좌측 상단의 역할선택 드롭메뉴에서 developer을 선택합니다.\n  4. Jenkins 설치 OKD-\u0026gt;Developer-\u0026gt;Add 4.1 All services 선택  4.2 jenkins 로 검색  4.3 Jenkins v0.0.3 Helm Charts 버전 설치 (기본 설정 사용)   4.4 설치 완료(Pods의 상태가 Running으로 바뀔때까지 대기)  5. OpenURL 아이콘을 선택해 jenkins 서비스 접속  6. Allow selected permissions 선택  7. 접속 완료 화면  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial5/",
	"title": "Tutorial5 : Jenkins Pipeline 구성",
	"tags": [],
	"description": "",
	"content": "Jenkins Pipeline 구성 1. ssh agent plug-in 설치  Jenkins -\u0026gt; Jenkins 관리 -\u0026gt; 플러그인 관리 이동 \u0026ldquo;ssh agent\u0026rdquo; 검색   1.1 Download now and install after restart 선택  1.2 설치가 끝나고 실행중인 작업이 없으면 Jenkins 재시작 선택  1.3 로그인 화면  2. credentials 등록  Jenkins -\u0026gt; Jenkins 관리 -\u0026gt; Manage Credentials 이동  2.1 (Global) 도메인 선택  2.2 Add Credentials 선택   Jenkinsfile 확인  jenkinsfile의 credentialsId 이름으로 등록한다.\ncredentialsId \u0026lsquo;jenkins-ssh-private\u0026rsquo;\nID : jenkins-ssh-private\nUsername : jenkins-ssh-private\nPrivate Key : 이전단계에서 생성한 Private key를 등록한다.\n\r  3. 새로운 아이템 생성  item name : okd-turotial\ntype : pipeline 선택\n\r 3.1 General 설정 GitHub project 체크\nProject url : https://github.com/blackwhale-testuser/okd-tutorial1-src\n\r 3.2 Build Triggers 설정 GitHub hook trigger for GITScm polling 체크\n\r 3.3 Pipeline 설정 Definition : Pipeline script from SCM 선택\nRepository URL : https://github.com/blackwhale-testuser/okd-tutorial1-src\nBranch Specifier : */master\n\r  SCM(Source Code Management) : git이나 svn과 같은 소스관리 도구\n "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial6/",
	"title": "Tutorial6 : Buildconfig 설정",
	"tags": [],
	"description": "",
	"content": "OKD Buildconfig 설정 설치한 Jenkins 버전에는 docker를 포함하지 않는다.\ndocker image 빌드를 위해 okd buildconfig를 사용한다.\n\r1. BuildConfig 생성  okd -\u0026gt; Developer -\u0026gt; Builds    1.1 Create BuildConfig 선택   Jenkinsfile 확인  BuildConfig 이름을 jenkinsfile에 appName으로 맵핑된다.\njenkinsfile의 appName을 BuildConfig의 이름으로 변경한다.\nappName = \u0026ldquo;okd-tutorial\u0026rdquo;\n\r1.2 아래 내용을 편집해 본인 설정에 맞게 변경한다. BuildConfig YAML 샘플\nkind: BuildConfig apiVersion: build.openshift.io/v1 metadata:  name: okd-tutorial  labels:  app.kubernetes.io/name: okd-tutorial spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: \u0026#39;docker.io/spcsenti2023/okdtutorial:latest\u0026#39;  strategy:  type: Docker  dockerStrategy:  dockerfilePath: Dockerfile  postCommit: {}  source:  type: Binary  binary: {}  runPolicy: Serial 1.3 생성 화면  2. Secrets 추가  2.1 Create(Image pull secret) 선택  2.2 dockerhub에 가입한 아이디와 패스워드를 입력한다. Secret name : dockerio-okdtutorial\n\r 3. ServiceAccount(builder)에 secret 추가  okd -\u0026gt; Administrator -\u0026gt; User Management -\u0026gt; ServiceAccounts 이동    4. builder 선택  5. Secrets 섹션에 dockerio-okdtutorial 추가후 Save 선택  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial7/",
	"title": "Tutorial7 : 테스트 빌드",
	"tags": [],
	"description": "",
	"content": "Jenkins Test Build 1. Build now 선택  2. 빌드 성공  3. dockerhub 이미지 push 확인  4. gitops repo 확인  5. jenkinsfile 확인 library identifier: \u0026#34;pipeline-library@v1.5\u0026#34;, retriever: modernSCM(  [  $class: \u0026#34;GitSCMSource\u0026#34;,  remote: \u0026#34;https://github.com/redhat-cop/pipeline-library.git\u0026#34;  ] )  // OKD의 Buildconifg의 이름과 일치시켜야 한다. appName = \u0026#34;okd-tutorial\u0026#34;  pipeline {  agent {  node {  label \u0026#39;nodejs\u0026#39;  }  }  options {  timeout(time: 20, unit: \u0026#39;MINUTES\u0026#39;)  }  stages {  stage(\u0026#34;Checkout\u0026#34;) {  steps {  checkout scm  }  }  stage(\u0026#39;Build\u0026#39;) {  steps {  sh \u0026#39;npm install\u0026#39;  sh \u0026#39;CI=false npm run build\u0026#39;  }  }  stage(\u0026#34;Docker Build\u0026#34;) {  steps {  // This uploads your application\u0026#39;s source code and performs a binary build in OpenShift // This is a step defined in the shared library (see the top for the URL) // (Or you could invoke this step using \u0026#39;oc\u0026#39; commands!) binaryBuild(buildConfigName: appName, buildFromPath: \u0026#34;.\u0026#34;) } } stage(\u0026#34;Update Tag\u0026#34;) { steps { checkout([$class: \u0026#39;GitSCM\u0026#39;, branches: [[name: \u0026#39;*/master\u0026#39; ]], extensions: scm.extensions, userRemoteConfigs: [[ url: \u0026#39;git@github.com:blackwhale-testuser/okd-tutorial1-gitops.git\u0026#39;, credentialsId: \u0026#39;jenkins-ssh-private\u0026#39;, ]] ]) sshagent(credentials: [\u0026#39;jenkins-ssh-private\u0026#39;]){ sh(\u0026#34;\u0026#34;\u0026#34; #!/usr/bin/env bash set +x export GIT_SSH_COMMAND=\u0026#34;ssh -oStrictHostKeyChecking=no\u0026#34; echo Build Number = {$BUILD_NUMBER} git config --global user.email \u0026#34;test@gmail.com\u0026#34; git checkout master cp --f base/deployment-sample.yaml okd-deploy/testblog-deployment.yaml cd okd-deploy sed -i \u0026#39;s/MY_BUILD_TAG/$BUILD_NUMBER/\u0026#39; testblog-deployment.yaml  cat testblog-deployment.yaml  git commit -a -m \u0026#34;demo tag\u0026#34;  git push  \u0026#34;\u0026#34;\u0026#34;) } } } } } "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial8/",
	"title": "Tutorial8 : ArgoCD 설정",
	"tags": [],
	"description": "",
	"content": "ArgoCD 설치 1. ArgoCD Operator 이동  okd -\u0026gt; Administrator -\u0026gt; Operators -\u0026gt; Installed Operators 이동    2. ArgoCD 탭으로 이동후 Create ArgoCD 선택    3. Developer로 변경후 Topology 확인  okd -\u0026gt; Developer -\u0026gt; Topology    4. ArgoCD Admin 패스워드 확인  okd -\u0026gt; Developer -\u0026gt; Secrets 이동 cluster 검색    argocd-sample-cluster 시크릿 확인  Reveal values 클릭 (복호화된 admin password를 확인할 수 있다.)  암호 변경은 YAML 탭으로 변경후 admin.password: 필드에 base64로 인코딩한 암호를 붙여넣는다.\n\r5. Topology로 이동후 argocd-sample-server의 OpenURL을 선택한다. \rUsername : admin\nPassword : r8BtkSKu3J0ex4TXUbs***********\n\r  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial9/",
	"title": "Tutorial9 : ArgoCD를 이용한 배포",
	"tags": [],
	"description": "",
	"content": "ArgoCD App 배포하기 1. image registry 주소 변경   GitOps Repo\n  아래 2개의 yaml파일을 편집해 이미지 경로를 본인 dockerhub의 계정과 리파지토리로 변경한다.\n\u0026ndash; base/deployment-sample.yaml\n\u0026ndash; okd-deploy/testblog-deployment.yaml\n  image: docker.io/spcsenti/testblog:latest \u0026ndash;\u0026gt; image: docker.io/spcsenti2023/okdtutorial:latest\n  2. New App 선택 [GENERAL]\nApplication Name : okd-tutorial\nProject : default\n\u0026hellip;\n[SOURCE]\nRepository URL : https://github.com/blackwhale-testuser/okd-tutorial1-gitops\nRevision : HEAD\nPath : okd-deploy\n\u0026hellip;\n[DESTINATION]\nCluster URL : https://kubernetes.default.svc\nNamespace : okd-tutorial\n\u0026hellip;\n\r 2.1 Out of Sync일 경우에는 SYNC 버튼을 눌러 Synchronize를 수행한다.  2.2 Topology를 확인한다. blog-frontend가 배포되었는지 확인  2.3 OpenURL을 눌러 확인한다.  "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial10/",
	"title": "Tutorial10 : GitHub Webhook 추가",
	"tags": [],
	"description": "",
	"content": "CI/CD 1. GitHub Source Repository에 Webhook 추가  Source Repositoy  1.1 Settings -\u0026gt; Webhooks 이동후 Add Webhook 선택  1.2 jenkins 주소를 확인후 payload url에 입력  Payload URL : https://jenkins-okd-tutorial.apps.blackwhale.cloud.hancom.com/github-webhook/\nContent type : application/json\nTrigger : Juste the push event\n\r1.3 소스 수정후 commit \rJenkinsfile의 태그를 업데이트 해야 GitOps Repo로 Commit 할 수 있다.\nsed -i \u0026rsquo;s/MY_BUILD_TAG/$BUILD_NUMBER/\u0026rsquo; testblog-deployment.yaml\nBUILD_NUMBER가 정상적으로 셋팅되는지 확인\n\r 1.4 Jenkins 빌드가 자동으로 동작하는지 확인  2. ArgoCD Auto-Sync \rApplications -\u0026gt; \u0026ldquo;Your Application\u0026rdquo; 이동후 App Details 선택\nSYNC-POLICY : Enable Auto-Sync 선택\n\r "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial11/",
	"title": "Tutorial11 : 문제 해결",
	"tags": [],
	"description": "",
	"content": "문제 해결 1. OKD BuildConfig 빌드 확인  okd -\u0026gt; Developer -\u0026gt; Builds 생성한 BuildConfig를 선택해 Builds 탭으로 이동하면 빌드 히스토리를 확인할 수 있다.\n   2. 새로 배포한 버전이 이전 이미지를 참고하는 문제 Deployment의 imagePullPolicy를 Always로 주었음에도 이미지 갱신이 되지 않는 경우가 발생한다.\n저장소의 이미지와 로컬에 있는 이미지가 동일한 경우 이런 문제가 발생한다. Tag와 Digest 값이 동일한지 확인해본다.\n\r\u0026lt;before\u0026gt; spcsenti2023/okdtutorial:latest DIGEST:sha256:7521223d8a7c54a6c9e5a40b4f4866f4394eefb3494c5de8f47fbf4e536c40e9 \u0026lt;current\u0026gt; spcsenti2023/okdtutorial:latest DIGEST:sha256:14480c323c64dd065fa0b71067226ab8995c5f2660a8e7d747795ebc2647e1b8 3. BuildConfig에서 빌드 번호 자동 업데이트 가능할까?  stackoverflow  [Asked] I am doing CI/CD using openshift buildconfig. I am able to fetch the source code from git and successfully build the docker image and push to internal registry. I want to tag the image built with with build numbers based on Openshift Build config output labels are annotations. How to do that in the YAML, I am using docker build strategy. output: to: kind: DockerImage name: \u0026#39;internal.registry.com/app_name/sample_app:\u0026lt;BUILD_NUMBER/NAME\u0026gt;\u0026#39; Also once this is done, i want to update the image in deployment to get new version of app. Have anyone done such setup, Can anyone help me on this. [Answer] The yaml file is resolved when the buildConfig is created, it can\u0026#39;t have references to environment variables or build number information. If you are doing this from a CI/CD pipeline, you could create a different buildConfig in the same CI/CD pipeline, run it, and delete it. But you may have permissions issue to create the buildConfig every time. Another option I would prefer is to use ImageStreams. With ImageStream a single object keeps track of all versions of the image via sha codes, therefore there is no need to update the yaml every time. 4. https 지원 [service.yaml] .... ports: - name: http protocol: TCP port: 80 targetPort: 8080 - name: https protocol: TCP port: 443 targetPort: 8080 .... [route.yaml] spec: .... port: targetPort: https .... "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial12/",
	"title": "Tutorial12 : Private Repo 연동방법",
	"tags": [],
	"description": "",
	"content": "Private Repository 연동 1. SSH 키 생성  Git Bash 실행 사용자 폴더로 이동후 .ssh 폴더 생성 및 이동 ssh-keygen 실행  1.1 ssh-keygen 사용시 기본값(SHA-1)은 github에서 더 이상 인증 용도로 사용할 수 없다. Update : 2022-01-11\nNovember 16, 2021\tThe ECDSA and Ed25519 host keys will start to be fully usable. GitHub’s DSA host key will no longer be supported. Unable to connect SSH repository: unknown error: ERROR: You\u0026rsquo;re using an RSA key with SHA-1, which is no longer allowed. Please use a newer client or a different key type.\nhttps://github.blog/2021-09-01-improving-git-protocol-security-github/\n-\u0026gt; Removing support for all DSA keys\n-\u0026gt; Adding requirements for newly added RSA keys\n-\u0026gt; Removing some legacy SSH algorithms (HMAC-SHA-1 and CBC ciphers)\n-\u0026gt; Adding ECDSA and Ed25519 host keys for SSH\nTurning off the unencrypted Git protocol\n\rgithub 지원 타입 \u0026#39;ssh-rsa\u0026#39;, \u0026#39;ecdsa-sha2-nistp256\u0026#39;, \u0026#39;ecdsa-sha2-nistp384\u0026#39;, \u0026#39;ecdsa-sha2-nistp521\u0026#39;, \u0026#39;ssh-ed25519\u0026#39;, \u0026#39;sk-ecdsa-sha2-nistp256@openssh.com\u0026#39;, \u0026#39;sk-ssh-ed25519@openssh.com\u0026#39;. 아래 타입으로 생성 ssh-keygen -t ecdsa-sha2-nistp521 $ ssh-keygen -t ecdsa-sha2-nistp521 Generating public/private ecdsa-sha2-nistp521 key pair. Enter file in which to save the key (/c/Users/owner/.ssh/id_ecdsa): blackwhale-testuser-nistp521-id Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in blackwhale-testuser-nistp521-id. Your public key has been saved in blackwhale-testuser-nistp521-id.pub. The key fingerprint is: SHA256:XwWVH/MoeDVvW6UGGUru6gGnPMoHv7bRU+cvKNs68BY owner@DESKTOP-2M4EABD The key\u0026#39;s randomart image is: +---[ECDSA 521]---+ | . o+.. | | o .o.+o.| | o. o.*=| | .. o.+ *| | . S o.oo .o| | ...=E+ + . | | o=o=.... | | . .++=+. .. | | ooo++=. .. | +----[SHA256]-----+   2. Github Private Repository 설정 2.1 User profile에서 Settings 이동  2.2 SSH and GPG Keys 설정으로 이동  2.3 New SSH key 선택후 생성한 testuser_id.pub 파일을 메모장으로 열어 모두 복사후 붙여넣기  3. Repository Clone 방법   \u0026ldquo;사용자 폴더\u0026rdquo;/.ssh/config 파일을 만든다.    생성한 키를 아래 형식으로 추가한다.\n  Host testuser_github Hostname github.com User git IdentityFile=C:\\Users\\owner\\.ssh\\testuser_id  git clone  git clone testuser_github:blackwhale-testuser/privatetutorial.git [output]\nC:\\Work2021\\spcsenti2023\u0026gt;git clone testuser_github:blackwhale-testuser/privatetutorial.git Cloning into \u0026#39;privatetutorial\u0026#39;... remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 Receiving objects: 100% (3/3), done. 4. Jenkins Private Repository 설정 방법  Deploy Key 생성  SSH 키 생성\nGit Bash 실행\n사용자 폴더로 이동후 .ssh 폴더 생성 및 이동\nssh-keygen 실행\n\r4.1 ssh key 생성   4.2 GitHub private repository로 이동하여, Settings의 Deploy Keys를 선택한다.  4.3 생성한 Public Key를 메모장으로 열어 모두 복사후 붙여 넣는다.  5. Jenkins 설정  Jenkins → Jenkins 관리 → Manage Credentials 이동 (global) 도메인 선택     Add Credentials 선택\n  Kind를 SSH Username with private key 선택\n  ID와 Username을 입력\n  Privte Key에서 Enter directly를 선택후 Add를 눌러 생성한 Private Key를 메모장으로 열어 모두 복사후 붙여넣는다.    파이프라인 생성과정은 동일\n  GitHub Repository에서 SSH Clone 주소를 확인한다.\n  git@github.com:blackwhale-testuser/privatetutorial.git\n   \rPipeline 설정에서 Repository URL을 위에서 확인한 주소로 넣는다.\nCredentials에서 본인이 생성한 Credential을 선택한다.\n\r 6. ArgoCD Private Repository 설정 방법 6.1 ArgoCD 이동후 Settings → Repositories 이동    CONNECT REPO USING SSH 선택\n  로컬에서 생성한 Private Key를 메모장으로 열어 모두 복사후 SSH private key data에 붙여 넣는다.\n  Skip server verification 체크\n  Enable LFS support(Git only) 체크\n  Connect를 누른다.\n  Connection Status가 Successful인지 확인    GitHub Private repository SSH 주소를 확인한다.\n  git@github.com:blackwhale-testuser/privatetutorial.git    App 생성시 Source의 Repository URL에 ssh 주소를 입력한다.    "
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/tutorial13/",
	"title": "Tutorial13 : BuildConfig 사용 예",
	"tags": [],
	"description": "",
	"content": "orca-harbor + buildconfig 1. image pull secret 추가 Secret name : orca-harbor-secret\nRegistry server address : orca-harbor.cloud.hancom.com\nUsername : \u0026ldquo;이름\u0026rdquo;\nPassword : harbor 접속후 CLI secret 확인\n\r 2. User Profile을 눌러 CLI secret 복사후 사용  3. BuildConfig 사용 예제1 apiVersion: build.openshift.io/v1 kind: BuildConfig metadata:  name: testblog  namespace: okd-tutorial  labels:  app.kubernetes.io/name: testblog spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: \u0026#39;image 경로\u0026#39;  pushSecret:  name: \u0026#39;orca-harbor-secret\u0026#39;  source:  git:  ref: master  uri: \u0026#39;https://github.com/bluewhale-users/okd-tutorial1-src.git\u0026#39;  type: Git  strategy:  type: Docker  dockerStrategy:  dockerfilePath: Dockerfile  triggers:  - type: ImageChange  imageChange: {}  - type: ConfigChange 4. BuildConfig 사용 예제2 apiVersion: build.openshift.io/v1 kind: BuildConfig metadata:  name: standardterm  namespace: okd-externaladdin  labels:  app.kubernetes.io/name: standardterm spec:  nodeSelector: null  output:  to:  kind: DockerImage  name: \u0026#39;image 경로\u0026#39;  pushSecret:  name: \u0026#39;orca-harbor-usetoken\u0026#39;  type: Git  strategy:  type: Docker  dockerStrategy:  dockerfilePath: Dockerfile  postCommit: {}  source:  type: Binary  binary: {}  runPolicy: Serial  triggers:  - type: ImageChange  imageChange: {}  - type: ConfigChange "
},
{
	"uri": "https://bluewhale-users.github.io/ko/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/post/",
	"title": "Posts",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/post/test/",
	"title": "Test",
	"tags": [],
	"description": "",
	"content": "테스트입니다.\n"
},
{
	"uri": "https://bluewhale-users.github.io/ko/okd/cicd/",
	"title": "CI/CD 튜토리얼",
	"tags": [],
	"description": "",
	"content": "CI/CD Tutorial1 : 준비 CI/CD Tutorial2 : 레파지토리 생성 CI/CD Tutorial3 : DockerHub 설정 CI/CD Tutorial4 : Jenkins 설정 CI/CD Tutorial5 : Jenkins Pipeline 구성 CI/CD Tutorial6 : Buildconfig 설정 CI/CD Tutorial7 : 테스트 빌드 CI/CD Tutorial8 : ArgoCD 설정 CI/CD Tutorial9 : ArgoCD를 이용한 배포 CI/CD Tutorial10 : GitHub Webhook 추가 CI/CD Tutorial11 : 문제 해결 CI/CD Tutorial12 : Private 레파지토리 연동방법 CI/CD Tutorial13 : Buildconifg 사용 예 "
},
{
	"uri": "https://bluewhale-users.github.io/ko/hugo/usage/",
	"title": "Hugo 사용법",
	"tags": [],
	"description": "",
	"content": "Hugo1 : Hugo 소개 Hugo2 : 사이트 구축 Hugo3 : 테마 수정 및 변경 Hugo4 : css 스타일 참조 "
},
{
	"uri": "https://bluewhale-users.github.io/ko/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://bluewhale-users.github.io/ko/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
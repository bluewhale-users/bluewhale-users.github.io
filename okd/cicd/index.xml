<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD on Bluewhale Tutorial Site</title>
    <link>https://bluewhale-users.github.io/okd/cicd/</link>
    <description>Recent content in CI/CD on Bluewhale Tutorial Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 17 Oct 2017 15:26:15 +0000</lastBuildDate><atom:link href="https://bluewhale-users.github.io/okd/cicd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tutorial2</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial2/</link>
      <pubDate>Tue, 15 Mar 2022 11:27:51 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial2/</guid>
      <description>GitHub Repository 준비 origin repository [src] https://github.com/bluewhale-users/okd-tutorial1-src [gitops] https://github.com/bluewhale-users/okd-tutorial1-gitops fork repository [src] https://github.com/blackwhale-testuser/okd-tutorial1-src [gitops] https://github.com/blackwhale-testuser/okd-tutorial1-gitops 1. 2개 리파지토리를 본인 계정으로 fork 한다. 2. Deploy Key 생성 및 등록 jenkins 빌드후 gitops 리파지토리에 commit을 수행하기 위해 deploy ke</description>
    </item>
    
    <item>
      <title>Tutorial3</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial3/</link>
      <pubDate>Tue, 15 Mar 2022 11:31:20 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial3/</guid>
      <description>DockerHub 설정 1. docker hub에 계정을 만든다. dockerhub 2.리파지토리를 생성한다. name : okdtutorial visibility : public</description>
    </item>
    
    <item>
      <title>Tutorial4</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial4/</link>
      <pubDate>Tue, 15 Mar 2022 11:31:43 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial4/</guid>
      <description>Jenkins 설치 1. OKD 로그인 https://console-openshift-console.apps.blackwhale.cloud.hancom.com/ 2. Project 만들기 3. 역할 전환(developer) 4. Jenkins 설치 OKD-&amp;gt;Developer-&amp;gt;Add 4.1 All services 선택 4.2 jenkins 로 검색 4.3 Jenkins v0.0.3 Helm Charts 버전 설치 (기본 설정 사용) 4.4 설치 완료(Po</description>
    </item>
    
    <item>
      <title>Tutorial5</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial5/</link>
      <pubDate>Tue, 15 Mar 2022 11:31:56 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial5/</guid>
      <description>Jenkins Pipeline 구성 1. ssh agent plug-in 설치 - Jenkins -&amp;gt; Jenkins 관리 -&amp;gt; 플러그인 관리 이동 - &amp;#34;ssh agent&amp;#34; 검색 Download now and install after restart 선택 설치가 끝나고 실행중인 작업이 없으면 Jenkins 재시작 선택 로그인 화면 2. credentials 등록 -</description>
    </item>
    
    <item>
      <title>Tutorial6</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial6/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:10 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial6/</guid>
      <description>OKD Buildconfig 설정 설치한 Jenkins 버전에는 docker를 포함하지 않는다. docker image 빌드를 위해 okd buildconfig를 사용한다. 1. BuildConfig 생성 - okd -&amp;gt; Developer -&amp;gt; Builds Create BuildConfig 선택 Jenkinsfile 확인 BuildConfig</description>
    </item>
    
    <item>
      <title>Tutorial7</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial7/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:25 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial7/</guid>
      <description>Jenkins Test Build 1. Build now 선택 빌드 성공 dockerhub 이미지 push 확인 gitops repo 확인 jenkinsfile 확인 library identifier: &amp;#34;pipeline-library@v1.5&amp;#34;, retriever: modernSCM( [ $class: &amp;#34;GitSCMSource&amp;#34;, remote: &amp;#34;https://github.com/redhat-cop/pipeline-library.git&amp;#34; ] ) // OKD의 Buildconifg의 이름과 일치시켜야 한다. appName = &amp;#34;okd-tutorial&amp;#34; pipeline</description>
    </item>
    
    <item>
      <title>Tutorial8</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial8/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:36 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial8/</guid>
      <description>ArgoCD 설치 1. ArgoCD Operator 이동 - okd -&amp;gt; Administrator -&amp;gt; Operators -&amp;gt; Installed Operators 이동 2. ArgoCD 탭으로 이동후 Create ArgoCD 선택 3. Developer로 변경후 Topology 확인 - okd -&amp;gt; Developer -&amp;gt; Topology 4. ArgoCD Admin 패스워드 확인 - okd -&amp;gt; Developer -&amp;gt; Secrets 이</description>
    </item>
    
    <item>
      <title>Tutorial9</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial9/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:43 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial9/</guid>
      <description>ArgoCD App 배포하기 1. image registry 주소 변경 GitOps Repo 아래 2개의 yaml파일을 편집해 이미지 경로를 본인 dockerhub의 계정과 리파지토리로 변경한다. base/deployment-sample.yaml okd-deploy/testblog-deployment.yaml image: docker.io/spcsenti/testblog:latest --&amp;gt; image: docker.io/spcsenti2023/okdtutorial:latest 2.</description>
    </item>
    
    <item>
      <title>Tutorial10</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial10/</link>
      <pubDate>Tue, 15 Mar 2022 11:32:53 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial10/</guid>
      <description>CI/CD 1. GitHub Source Repository에 Webhook 추가 Source Repositoy Settings -&amp;gt; Webhooks 이동후 Add Webhook 선택 jenkins 주소를 확인후 payload url에 입력 Payload URL : https://jenkins-okd-tutorial.apps.blackwhale.cloud.hancom.com/github-webhook/ Content type : application/json Trigger : Juste the push event 소스 수정후 commit Jenkin</description>
    </item>
    
    <item>
      <title>Tutorial11</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial11/</link>
      <pubDate>Tue, 15 Mar 2022 11:33:03 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial11/</guid>
      <description>문제 해결 OKD BuildConfig 빌드 확인 - okd -&amp;gt; Developer -&amp;gt; Builds - 생성한 BuildConfig를 선택해 Builds 탭으로 이동하면 빌드 히스토리를 확인할 수 있다. 새로 배포한 버전이 이전 이미지</description>
    </item>
    
    <item>
      <title>Tutorial12</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial12/</link>
      <pubDate>Tue, 15 Mar 2022 11:33:14 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial12/</guid>
      <description>Private Repository 연동 1. SSH 키 생성 - Git Bash 실행 - 사용자 폴더로 이동후 .ssh 폴더 생성 및 이동 - ssh-keygen 실행 ssh-keygen 사용시 기본값(SHA-1)은 github에서 더 이상 인증 용도로 사용할</description>
    </item>
    
    <item>
      <title>Tutorial13</title>
      <link>https://bluewhale-users.github.io/okd/cicd/tutorial13/</link>
      <pubDate>Tue, 15 Mar 2022 11:33:27 +0900</pubDate>
      
      <guid>https://bluewhale-users.github.io/okd/cicd/tutorial13/</guid>
      <description>orca-harbor + buildconfig image pull secret 추가 Secret name : orca-harbor-secret Registry server address : orca-harbor.cloud.hancom.com Username : &amp;#34;이름&amp;#34; Password : harbor 접속후 CLI secret 확인 User Profile을 눌러 CLI secret 복사후 사용 BuildConfig 사용 예제1 apiVersion: build.openshift.io/v1 kind: BuildConfig metadata:</description>
    </item>
    
  </channel>
</rss>
